<Type Name="PurviewAccountClient" FullName="Azure.Analytics.Purview.Account.PurviewAccountClient">
  <TypeSignature Language="C#" Value="public class PurviewAccountClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PurviewAccountClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Analytics.Purview.Account.PurviewAccountClient" />
  <TypeSignature Language="VB.NET" Value="Public Class PurviewAccountClient" />
  <TypeSignature Language="F#" Value="type PurviewAccountClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The PurviewAccount service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PurviewAccountClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of PurviewAccountClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PurviewAccountClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Purview.Account.PurviewAccountClient : Uri * Azure.Core.TokenCredential -&gt; Azure.Analytics.Purview.Account.PurviewAccountClient" Usage="new Azure.Analytics.Purview.Account.PurviewAccountClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The account endpoint of your Purview account. Example: https://{accountName}.purview.azure.com/account/. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of PurviewAccountClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PurviewAccountClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Analytics.Purview.Account.PurviewAccountClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Analytics.Purview.Account.PurviewAccountClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Analytics.Purview.Account.PurviewAccountClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As PurviewAccountClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Purview.Account.PurviewAccountClient : Uri * Azure.Core.TokenCredential * Azure.Analytics.Purview.Account.PurviewAccountClientOptions -&gt; Azure.Analytics.Purview.Account.PurviewAccountClient" Usage="new Azure.Analytics.Purview.Account.PurviewAccountClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Analytics.Purview.Account.PurviewAccountClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The account endpoint of your Purview account. Example: https://{accountName}.purview.azure.com/account/. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of PurviewAccountClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAccessKeys">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetAccessKeys (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetAccessKeys(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.GetAccessKeys(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessKeys (Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetAccessKeys : Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetAccessKeys : Azure.RequestContext -&gt; Azure.Response" Usage="purviewAccountClient.GetAccessKeys context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> List the authorization keys associated with this account. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              atlasKafkaPrimaryEndpoint: string,
              atlasKafkaSecondaryEndpoint: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                details: [
                  {
                    code: string,
                    details: [ErrorModel],
                    message: string,
                    target: string
                  }
                ],
                message: string,
                target: string
              }
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessKeys">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetAccessKeys (Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetAccessKeys(class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.GetAccessKeys(Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessKeys (Optional options As RequestOptions = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetAccessKeys : Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetAccessKeys : Azure.RequestOptions -&gt; Azure.Response" Usage="purviewAccountClient.GetAccessKeys options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="options"> The request options. </param>
        <summary> List the authorization keys associated with this account. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessKeysAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetAccessKeysAsync (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetAccessKeysAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.GetAccessKeysAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessKeysAsync (Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetAccessKeysAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetAccessKeysAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewAccountClient.GetAccessKeysAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> List the authorization keys associated with this account. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              atlasKafkaPrimaryEndpoint: string,
              atlasKafkaSecondaryEndpoint: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                details: [
                  {
                    code: string,
                    details: [ErrorModel],
                    message: string,
                    target: string
                  }
                ],
                message: string,
                target: string
              }
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessKeysAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetAccessKeysAsync (Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetAccessKeysAsync(class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.GetAccessKeysAsync(Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessKeysAsync (Optional options As RequestOptions = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetAccessKeysAsync : Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetAccessKeysAsync : Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewAccountClient.GetAccessKeysAsync options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="options"> The request options. </param>
        <summary> List the authorization keys associated with this account. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccountProperties">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetAccountProperties (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetAccountProperties(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.GetAccountProperties(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccountProperties (Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetAccountProperties : Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetAccountProperties : Azure.RequestContext -&gt; Azure.Response" Usage="purviewAccountClient.GetAccountProperties context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get an account. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              id: string,
              identity: {
                principalId: string,
                tenantId: string,
                type: "SystemAssigned"
              },
              location: string,
              name: string,
              properties: {
                cloudConnectors: {
                  awsExternalId: string
                },
                createdAt: string (ISO 8601 Format),
                createdBy: string,
                createdByObjectId: string,
                endpoints: {
                  catalog: string,
                  guardian: string,
                  scan: string
                },
                friendlyName: string,
                managedResourceGroupName: string,
                managedResources: {
                  eventHubNamespace: string,
                  resourceGroup: string,
                  storageAccount: string
                },
                privateEndpointConnections: [
                  {
                    id: string,
                    name: string,
                    properties: {
                      privateEndpoint: {
                        id: string
                      },
                      privateLinkServiceConnectionState: {
                        actionsRequired: string,
                        description: string,
                        status: "Unknown" | "Pending" | "Approved" | "Rejected" | "Disconnected"
                      },
                      provisioningState: string
                    },
                    type: string
                  }
                ],
                provisioningState: "Unknown" | "Creating" | "Moving" | "Deleting" | "SoftDeleting" | "SoftDeleted" | "Failed" | "Succeeded" | "Canceled",
                publicNetworkAccess: "NotSpecified" | "Enabled" | "Disabled"
              },
              sku: {
                capacity: number,
                name: "Standard"
              },
              systemData: {
                createdAt: string (ISO 8601 Format),
                createdBy: string,
                createdByType: "User" | "Application" | "ManagedIdentity" | "Key",
                lastModifiedAt: string (ISO 8601 Format),
                lastModifiedBy: string,
                lastModifiedByType: "User" | "Application" | "ManagedIdentity" | "Key"
              },
              tags: Dictionary&lt;string, string&gt;,
              type: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                details: [
                  {
                    code: string,
                    details: [ErrorModel],
                    message: string,
                    target: string
                  }
                ],
                message: string,
                target: string
              }
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccountProperties">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetAccountProperties (Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetAccountProperties(class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.GetAccountProperties(Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccountProperties (Optional options As RequestOptions = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetAccountProperties : Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetAccountProperties : Azure.RequestOptions -&gt; Azure.Response" Usage="purviewAccountClient.GetAccountProperties options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="options"> The request options. </param>
        <summary> Get an account. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccountPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetAccountPropertiesAsync (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetAccountPropertiesAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.GetAccountPropertiesAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccountPropertiesAsync (Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetAccountPropertiesAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetAccountPropertiesAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewAccountClient.GetAccountPropertiesAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get an account. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              id: string,
              identity: {
                principalId: string,
                tenantId: string,
                type: "SystemAssigned"
              },
              location: string,
              name: string,
              properties: {
                cloudConnectors: {
                  awsExternalId: string
                },
                createdAt: string (ISO 8601 Format),
                createdBy: string,
                createdByObjectId: string,
                endpoints: {
                  catalog: string,
                  guardian: string,
                  scan: string
                },
                friendlyName: string,
                managedResourceGroupName: string,
                managedResources: {
                  eventHubNamespace: string,
                  resourceGroup: string,
                  storageAccount: string
                },
                privateEndpointConnections: [
                  {
                    id: string,
                    name: string,
                    properties: {
                      privateEndpoint: {
                        id: string
                      },
                      privateLinkServiceConnectionState: {
                        actionsRequired: string,
                        description: string,
                        status: "Unknown" | "Pending" | "Approved" | "Rejected" | "Disconnected"
                      },
                      provisioningState: string
                    },
                    type: string
                  }
                ],
                provisioningState: "Unknown" | "Creating" | "Moving" | "Deleting" | "SoftDeleting" | "SoftDeleted" | "Failed" | "Succeeded" | "Canceled",
                publicNetworkAccess: "NotSpecified" | "Enabled" | "Disabled"
              },
              sku: {
                capacity: number,
                name: "Standard"
              },
              systemData: {
                createdAt: string (ISO 8601 Format),
                createdBy: string,
                createdByType: "User" | "Application" | "ManagedIdentity" | "Key",
                lastModifiedAt: string (ISO 8601 Format),
                lastModifiedBy: string,
                lastModifiedByType: "User" | "Application" | "ManagedIdentity" | "Key"
              },
              tags: Dictionary&lt;string, string&gt;,
              type: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                details: [
                  {
                    code: string,
                    details: [ErrorModel],
                    message: string,
                    target: string
                  }
                ],
                message: string,
                target: string
              }
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccountPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetAccountPropertiesAsync (Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetAccountPropertiesAsync(class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.GetAccountPropertiesAsync(Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccountPropertiesAsync (Optional options As RequestOptions = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetAccountPropertiesAsync : Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetAccountPropertiesAsync : Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewAccountClient.GetAccountPropertiesAsync options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="options"> The request options. </param>
        <summary> Get an account. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCollectionClient">
      <MemberSignature Language="C#" Value="public virtual Azure.Analytics.Purview.Account.PurviewCollection GetCollectionClient (string collectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Analytics.Purview.Account.PurviewCollection GetCollectionClient(string collectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.GetCollectionClient(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCollectionClient (collectionName As String) As PurviewCollection" />
      <MemberSignature Language="F#" Value="abstract member GetCollectionClient : string -&gt; Azure.Analytics.Purview.Account.PurviewCollection&#xA;override this.GetCollectionClient : string -&gt; Azure.Analytics.Purview.Account.PurviewCollection" Usage="purviewAccountClient.GetCollectionClient collectionName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Analytics.Purview.Account.PurviewCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="collectionName">The name of the collection to use.</param>
        <summary>
            Gets a service client for interacting with a collection.
            </summary>
        <returns>A service client for interacting with a collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCollections">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetCollections (string skipToken = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetCollections(string skipToken, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.GetCollections(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCollections (Optional skipToken As String = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetCollections : string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetCollections : string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="purviewAccountClient.GetCollections (skipToken, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="skipToken"> The String to use. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> List the collections in the account. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              count: number,
              nextLink: string,
              value: [
                {
                  collectionProvisioningState: "Unknown" | "Creating" | "Moving" | "Deleting" | "Failed" | "Succeeded",
                  description: string,
                  friendlyName: string,
                  name: string,
                  parentCollection: {
                    referenceName: string,
                    type: string
                  },
                  systemData: {
                    createdAt: string (ISO 8601 Format),
                    createdBy: string,
                    createdByType: "User" | "Application" | "ManagedIdentity" | "Key",
                    lastModifiedAt: string (ISO 8601 Format),
                    lastModifiedBy: string,
                    lastModifiedByType: "User" | "Application" | "ManagedIdentity" | "Key"
                  }
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                details: [
                  {
                    code: string,
                    details: [ErrorModel],
                    message: string,
                    target: string
                  }
                ],
                message: string,
                target: string
              }
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCollections">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetCollections (string skipToken = default, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetCollections(string skipToken, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.GetCollections(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCollections (Optional skipToken As String = Nothing, Optional options As RequestOptions = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetCollections : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetCollections : string * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewAccountClient.GetCollections (skipToken, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="skipToken"> The String to use. </param>
        <param name="options"> The request options. </param>
        <summary> List the collections in the account. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCollectionsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetCollectionsAsync (string skipToken = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetCollectionsAsync(string skipToken, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.GetCollectionsAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCollectionsAsync (Optional skipToken As String = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetCollectionsAsync : string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetCollectionsAsync : string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="purviewAccountClient.GetCollectionsAsync (skipToken, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="skipToken"> The String to use. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> List the collections in the account. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              count: number,
              nextLink: string,
              value: [
                {
                  collectionProvisioningState: "Unknown" | "Creating" | "Moving" | "Deleting" | "Failed" | "Succeeded",
                  description: string,
                  friendlyName: string,
                  name: string,
                  parentCollection: {
                    referenceName: string,
                    type: string
                  },
                  systemData: {
                    createdAt: string (ISO 8601 Format),
                    createdBy: string,
                    createdByType: "User" | "Application" | "ManagedIdentity" | "Key",
                    lastModifiedAt: string (ISO 8601 Format),
                    lastModifiedBy: string,
                    lastModifiedByType: "User" | "Application" | "ManagedIdentity" | "Key"
                  }
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                details: [
                  {
                    code: string,
                    details: [ErrorModel],
                    message: string,
                    target: string
                  }
                ],
                message: string,
                target: string
              }
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCollectionsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetCollectionsAsync (string skipToken = default, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetCollectionsAsync(string skipToken, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.GetCollectionsAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCollectionsAsync (Optional skipToken As String = Nothing, Optional options As RequestOptions = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetCollectionsAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetCollectionsAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewAccountClient.GetCollectionsAsync (skipToken, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="skipToken"> The String to use. </param>
        <param name="options"> The request options. </param>
        <summary> List the collections in the account. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPurviewCollectionClient">
      <MemberSignature Language="C#" Value="public virtual Azure.Analytics.Purview.Account.PurviewCollection GetPurviewCollectionClient (string collectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Analytics.Purview.Account.PurviewCollection GetPurviewCollectionClient(string collectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.GetPurviewCollectionClient(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPurviewCollectionClient (collectionName As String) As PurviewCollection" />
      <MemberSignature Language="F#" Value="abstract member GetPurviewCollectionClient : string -&gt; Azure.Analytics.Purview.Account.PurviewCollection&#xA;override this.GetPurviewCollectionClient : string -&gt; Azure.Analytics.Purview.Account.PurviewCollection" Usage="purviewAccountClient.GetPurviewCollectionClient collectionName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Analytics.Purview.Account.PurviewCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="collectionName"> The String to use. </param>
        <summary> Initializes a new instance of PurviewCollection. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="collectionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="collectionName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPurviewResourceSetRuleClient">
      <MemberSignature Language="C#" Value="public virtual Azure.Analytics.Purview.Account.PurviewResourceSetRule GetPurviewResourceSetRuleClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Analytics.Purview.Account.PurviewResourceSetRule GetPurviewResourceSetRuleClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.GetPurviewResourceSetRuleClient" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPurviewResourceSetRuleClient () As PurviewResourceSetRule" />
      <MemberSignature Language="F#" Value="abstract member GetPurviewResourceSetRuleClient : unit -&gt; Azure.Analytics.Purview.Account.PurviewResourceSetRule&#xA;override this.GetPurviewResourceSetRuleClient : unit -&gt; Azure.Analytics.Purview.Account.PurviewResourceSetRule" Usage="purviewAccountClient.GetPurviewResourceSetRuleClient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Analytics.Purview.Account.PurviewResourceSetRule</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of PurviewResourceSetRule. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetResourceSetRuleClient">
      <MemberSignature Language="C#" Value="public virtual Azure.Analytics.Purview.Account.PurviewResourceSetRule GetResourceSetRuleClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Analytics.Purview.Account.PurviewResourceSetRule GetResourceSetRuleClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.GetResourceSetRuleClient" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResourceSetRuleClient () As PurviewResourceSetRule" />
      <MemberSignature Language="F#" Value="abstract member GetResourceSetRuleClient : unit -&gt; Azure.Analytics.Purview.Account.PurviewResourceSetRule&#xA;override this.GetResourceSetRuleClient : unit -&gt; Azure.Analytics.Purview.Account.PurviewResourceSetRule" Usage="purviewAccountClient.GetResourceSetRuleClient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Analytics.Purview.Account.PurviewResourceSetRule</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets a service client for interacting with a resource set rule.
            </summary>
        <returns>A service client for interacting with a resource set rule.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetResourceSetRules">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetResourceSetRules (string skipToken = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetResourceSetRules(string skipToken, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.GetResourceSetRules(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResourceSetRules (Optional skipToken As String = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetResourceSetRules : string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetResourceSetRules : string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="purviewAccountClient.GetResourceSetRules (skipToken, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="skipToken"> The String to use. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get a resource set config service model. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              count: number,
              nextLink: string,
              value: [
                {
                  advancedResourceSet: {
                    modifiedAt: string (ISO 8601 Format),
                    resourceSetProcessing: "Default" | "Advanced"
                  },
                  name: string,
                  pathPatternConfig: {
                    acceptedPatterns: [
                      {
                        createdBy: string,
                        filterType: "Pattern" | "Regex",
                        lastUpdatedTimestamp: number,
                        modifiedBy: string,
                        name: string,
                        path: string
                      }
                    ],
                    complexReplacers: [
                      {
                        createdBy: string,
                        description: string,
                        disabled: boolean,
                        disableRecursiveReplacerApplication: boolean,
                        lastUpdatedTimestamp: number,
                        modifiedBy: string,
                        name: string,
                        typeName: string
                      }
                    ],
                    createdBy: string,
                    enableDefaultPatterns: boolean,
                    lastUpdatedTimestamp: number,
                    modifiedBy: string,
                    normalizationRules: [
                      {
                        description: string,
                        disabled: boolean,
                        dynamicReplacement: boolean,
                        entityTypes: [string],
                        lastUpdatedTimestamp: number,
                        name: string,
                        regex: {
                          maxDigits: number,
                          maxLetters: number,
                          minDashes: number,
                          minDigits: number,
                          minDigitsOrLetters: number,
                          minDots: number,
                          minHex: number,
                          minLetters: number,
                          minUnderscores: number,
                          options: number,
                          regexStr: string
                        },
                        replaceWith: string,
                        version: number
                      }
                    ],
                    regexReplacers: [
                      {
                        condition: string,
                        createdBy: string,
                        description: string,
                        disabled: boolean,
                        disableRecursiveReplacerApplication: boolean,
                        doNotReplaceRegex: FastRegex,
                        lastUpdatedTimestamp: number,
                        modifiedBy: string,
                        name: string,
                        regex: FastRegex,
                        replaceWith: string
                      }
                    ],
                    rejectedPatterns: [Filter],
                    scopedRules: [
                      {
                        bindingUrl: string,
                        rules: [
                          {
                            displayName: string,
                            isResourceSet: boolean,
                            lastUpdatedTimestamp: number,
                            name: string,
                            qualifiedName: string
                          }
                        ],
                        storeType: string
                      }
                    ],
                    version: number
                  }
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                details: [
                  {
                    code: string,
                    details: [ErrorModel],
                    message: string,
                    target: string
                  }
                ],
                message: string,
                target: string
              }
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetResourceSetRules">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetResourceSetRules (string skipToken = default, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetResourceSetRules(string skipToken, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.GetResourceSetRules(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResourceSetRules (Optional skipToken As String = Nothing, Optional options As RequestOptions = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetResourceSetRules : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetResourceSetRules : string * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewAccountClient.GetResourceSetRules (skipToken, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="skipToken"> The String to use. </param>
        <param name="options"> The request options. </param>
        <summary> Get a resource set config service model. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetResourceSetRulesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetResourceSetRulesAsync (string skipToken = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetResourceSetRulesAsync(string skipToken, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.GetResourceSetRulesAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResourceSetRulesAsync (Optional skipToken As String = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetResourceSetRulesAsync : string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetResourceSetRulesAsync : string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="purviewAccountClient.GetResourceSetRulesAsync (skipToken, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="skipToken"> The String to use. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get a resource set config service model. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              count: number,
              nextLink: string,
              value: [
                {
                  advancedResourceSet: {
                    modifiedAt: string (ISO 8601 Format),
                    resourceSetProcessing: "Default" | "Advanced"
                  },
                  name: string,
                  pathPatternConfig: {
                    acceptedPatterns: [
                      {
                        createdBy: string,
                        filterType: "Pattern" | "Regex",
                        lastUpdatedTimestamp: number,
                        modifiedBy: string,
                        name: string,
                        path: string
                      }
                    ],
                    complexReplacers: [
                      {
                        createdBy: string,
                        description: string,
                        disabled: boolean,
                        disableRecursiveReplacerApplication: boolean,
                        lastUpdatedTimestamp: number,
                        modifiedBy: string,
                        name: string,
                        typeName: string
                      }
                    ],
                    createdBy: string,
                    enableDefaultPatterns: boolean,
                    lastUpdatedTimestamp: number,
                    modifiedBy: string,
                    normalizationRules: [
                      {
                        description: string,
                        disabled: boolean,
                        dynamicReplacement: boolean,
                        entityTypes: [string],
                        lastUpdatedTimestamp: number,
                        name: string,
                        regex: {
                          maxDigits: number,
                          maxLetters: number,
                          minDashes: number,
                          minDigits: number,
                          minDigitsOrLetters: number,
                          minDots: number,
                          minHex: number,
                          minLetters: number,
                          minUnderscores: number,
                          options: number,
                          regexStr: string
                        },
                        replaceWith: string,
                        version: number
                      }
                    ],
                    regexReplacers: [
                      {
                        condition: string,
                        createdBy: string,
                        description: string,
                        disabled: boolean,
                        disableRecursiveReplacerApplication: boolean,
                        doNotReplaceRegex: FastRegex,
                        lastUpdatedTimestamp: number,
                        modifiedBy: string,
                        name: string,
                        regex: FastRegex,
                        replaceWith: string
                      }
                    ],
                    rejectedPatterns: [Filter],
                    scopedRules: [
                      {
                        bindingUrl: string,
                        rules: [
                          {
                            displayName: string,
                            isResourceSet: boolean,
                            lastUpdatedTimestamp: number,
                            name: string,
                            qualifiedName: string
                          }
                        ],
                        storeType: string
                      }
                    ],
                    version: number
                  }
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                details: [
                  {
                    code: string,
                    details: [ErrorModel],
                    message: string,
                    target: string
                  }
                ],
                message: string,
                target: string
              }
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetResourceSetRulesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetResourceSetRulesAsync (string skipToken = default, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetResourceSetRulesAsync(string skipToken, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.GetResourceSetRulesAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResourceSetRulesAsync (Optional skipToken As String = Nothing, Optional options As RequestOptions = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetResourceSetRulesAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetResourceSetRulesAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewAccountClient.GetResourceSetRulesAsync (skipToken, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="skipToken"> The String to use. </param>
        <param name="options"> The request options. </param>
        <summary> Get a resource set config service model. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Analytics.Purview.Account.PurviewAccountClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Analytics.Purview.Account.PurviewAccountClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegenerateAccessKey">
      <MemberSignature Language="C#" Value="public virtual Azure.Response RegenerateAccessKey (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response RegenerateAccessKey(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.RegenerateAccessKey(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RegenerateAccessKey (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member RegenerateAccessKey : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.RegenerateAccessKey : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewAccountClient.RegenerateAccessKey (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Regenerate the authorization keys associated with this data catalog. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              keyType: "PrimaryAtlasKafkaKey" | "SecondaryAtlasKafkaKey"
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              atlasKafkaPrimaryEndpoint: string,
              atlasKafkaSecondaryEndpoint: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                details: [
                  {
                    code: string,
                    details: [ErrorModel],
                    message: string,
                    target: string
                  }
                ],
                message: string,
                target: string
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RegenerateAccessKey">
      <MemberSignature Language="C#" Value="public virtual Azure.Response RegenerateAccessKey (Azure.Core.RequestContent content, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response RegenerateAccessKey(class Azure.Core.RequestContent content, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.RegenerateAccessKey(Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RegenerateAccessKey (content As RequestContent, Optional options As RequestOptions = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member RegenerateAccessKey : Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.RegenerateAccessKey : Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewAccountClient.RegenerateAccessKey (content, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="options"> The request options. </param>
        <summary> Regenerate the authorization keys associated with this data catalog. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <list type="table"><listheader><term>Name</term><term>Type</term><term>Required</term><term>Description</term></listheader><item><term>keyType</term><term>"PrimaryAtlasKafkaKey" | "SecondaryAtlasKafkaKey"</term><term /><term>The access key type.</term></item></list></remarks>
      </Docs>
    </Member>
    <Member MemberName="RegenerateAccessKeyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; RegenerateAccessKeyAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; RegenerateAccessKeyAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.RegenerateAccessKeyAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RegenerateAccessKeyAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member RegenerateAccessKeyAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.RegenerateAccessKeyAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewAccountClient.RegenerateAccessKeyAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Regenerate the authorization keys associated with this data catalog. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              keyType: "PrimaryAtlasKafkaKey" | "SecondaryAtlasKafkaKey"
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              atlasKafkaPrimaryEndpoint: string,
              atlasKafkaSecondaryEndpoint: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                details: [
                  {
                    code: string,
                    details: [ErrorModel],
                    message: string,
                    target: string
                  }
                ],
                message: string,
                target: string
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RegenerateAccessKeyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; RegenerateAccessKeyAsync (Azure.Core.RequestContent content, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; RegenerateAccessKeyAsync(class Azure.Core.RequestContent content, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.RegenerateAccessKeyAsync(Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RegenerateAccessKeyAsync (content As RequestContent, Optional options As RequestOptions = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member RegenerateAccessKeyAsync : Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.RegenerateAccessKeyAsync : Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewAccountClient.RegenerateAccessKeyAsync (content, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="options"> The request options. </param>
        <summary> Regenerate the authorization keys associated with this data catalog. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <list type="table"><listheader><term>Name</term><term>Type</term><term>Required</term><term>Description</term></listheader><item><term>keyType</term><term>"PrimaryAtlasKafkaKey" | "SecondaryAtlasKafkaKey"</term><term /><term>The access key type.</term></item></list></remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateAccountProperties">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateAccountProperties (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateAccountProperties(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.UpdateAccountProperties(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAccountProperties (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateAccountProperties : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateAccountProperties : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewAccountClient.UpdateAccountProperties (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Updates an account. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              friendlyName: string
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              id: string,
              identity: {
                principalId: string,
                tenantId: string,
                type: "SystemAssigned"
              },
              location: string,
              name: string,
              properties: {
                cloudConnectors: {
                  awsExternalId: string
                },
                createdAt: string (ISO 8601 Format),
                createdBy: string,
                createdByObjectId: string,
                endpoints: {
                  catalog: string,
                  guardian: string,
                  scan: string
                },
                friendlyName: string,
                managedResourceGroupName: string,
                managedResources: {
                  eventHubNamespace: string,
                  resourceGroup: string,
                  storageAccount: string
                },
                privateEndpointConnections: [
                  {
                    id: string,
                    name: string,
                    properties: {
                      privateEndpoint: {
                        id: string
                      },
                      privateLinkServiceConnectionState: {
                        actionsRequired: string,
                        description: string,
                        status: "Unknown" | "Pending" | "Approved" | "Rejected" | "Disconnected"
                      },
                      provisioningState: string
                    },
                    type: string
                  }
                ],
                provisioningState: "Unknown" | "Creating" | "Moving" | "Deleting" | "SoftDeleting" | "SoftDeleted" | "Failed" | "Succeeded" | "Canceled",
                publicNetworkAccess: "NotSpecified" | "Enabled" | "Disabled"
              },
              sku: {
                capacity: number,
                name: "Standard"
              },
              systemData: {
                createdAt: string (ISO 8601 Format),
                createdBy: string,
                createdByType: "User" | "Application" | "ManagedIdentity" | "Key",
                lastModifiedAt: string (ISO 8601 Format),
                lastModifiedBy: string,
                lastModifiedByType: "User" | "Application" | "ManagedIdentity" | "Key"
              },
              tags: Dictionary&lt;string, string&gt;,
              type: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                details: [
                  {
                    code: string,
                    details: [ErrorModel],
                    message: string,
                    target: string
                  }
                ],
                message: string,
                target: string
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAccountProperties">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateAccountProperties (Azure.Core.RequestContent content, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateAccountProperties(class Azure.Core.RequestContent content, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.UpdateAccountProperties(Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAccountProperties (content As RequestContent, Optional options As RequestOptions = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateAccountProperties : Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.UpdateAccountProperties : Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewAccountClient.UpdateAccountProperties (content, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="options"> The request options. </param>
        <summary> Updates an account. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <list type="table"><listheader><term>Name</term><term>Type</term><term>Required</term><term>Description</term></listheader><item><term>friendlyName</term><term>string</term><term /><term>The friendly name for the azure resource.</term></item></list></remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateAccountPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateAccountPropertiesAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateAccountPropertiesAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.UpdateAccountPropertiesAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAccountPropertiesAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateAccountPropertiesAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateAccountPropertiesAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewAccountClient.UpdateAccountPropertiesAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Updates an account. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              friendlyName: string
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              id: string,
              identity: {
                principalId: string,
                tenantId: string,
                type: "SystemAssigned"
              },
              location: string,
              name: string,
              properties: {
                cloudConnectors: {
                  awsExternalId: string
                },
                createdAt: string (ISO 8601 Format),
                createdBy: string,
                createdByObjectId: string,
                endpoints: {
                  catalog: string,
                  guardian: string,
                  scan: string
                },
                friendlyName: string,
                managedResourceGroupName: string,
                managedResources: {
                  eventHubNamespace: string,
                  resourceGroup: string,
                  storageAccount: string
                },
                privateEndpointConnections: [
                  {
                    id: string,
                    name: string,
                    properties: {
                      privateEndpoint: {
                        id: string
                      },
                      privateLinkServiceConnectionState: {
                        actionsRequired: string,
                        description: string,
                        status: "Unknown" | "Pending" | "Approved" | "Rejected" | "Disconnected"
                      },
                      provisioningState: string
                    },
                    type: string
                  }
                ],
                provisioningState: "Unknown" | "Creating" | "Moving" | "Deleting" | "SoftDeleting" | "SoftDeleted" | "Failed" | "Succeeded" | "Canceled",
                publicNetworkAccess: "NotSpecified" | "Enabled" | "Disabled"
              },
              sku: {
                capacity: number,
                name: "Standard"
              },
              systemData: {
                createdAt: string (ISO 8601 Format),
                createdBy: string,
                createdByType: "User" | "Application" | "ManagedIdentity" | "Key",
                lastModifiedAt: string (ISO 8601 Format),
                lastModifiedBy: string,
                lastModifiedByType: "User" | "Application" | "ManagedIdentity" | "Key"
              },
              tags: Dictionary&lt;string, string&gt;,
              type: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                details: [
                  {
                    code: string,
                    details: [ErrorModel],
                    message: string,
                    target: string
                  }
                ],
                message: string,
                target: string
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAccountPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateAccountPropertiesAsync (Azure.Core.RequestContent content, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateAccountPropertiesAsync(class Azure.Core.RequestContent content, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewAccountClient.UpdateAccountPropertiesAsync(Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAccountPropertiesAsync (content As RequestContent, Optional options As RequestOptions = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateAccountPropertiesAsync : Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateAccountPropertiesAsync : Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewAccountClient.UpdateAccountPropertiesAsync (content, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="options"> The request options. </param>
        <summary> Updates an account. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <list type="table"><listheader><term>Name</term><term>Type</term><term>Required</term><term>Description</term></listheader><item><term>friendlyName</term><term>string</term><term /><term>The friendly name for the azure resource.</term></item></list></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
