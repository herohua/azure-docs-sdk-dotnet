<Type Name="PurviewTypes" FullName="Azure.Analytics.Purview.Catalog.PurviewTypes">
  <TypeSignature Language="C#" Value="public class PurviewTypes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PurviewTypes extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Analytics.Purview.Catalog.PurviewTypes" />
  <TypeSignature Language="VB.NET" Value="Public Class PurviewTypes" />
  <TypeSignature Language="F#" Value="type PurviewTypes = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The PurviewTypes service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PurviewTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of PurviewTypes for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTypeDefinitions">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateTypeDefinitions (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateTypeDefinitions(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.CreateTypeDefinitions(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTypeDefinitions (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateTypeDefinitions : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateTypeDefinitions : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.CreateTypeDefinitions (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            Create all atlas type definitions in bulk, only new definitions will be created.
            Any changes to the existing definitions will be discarded.
            </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>AtlasTypesDef</c>:
            <code>{
              businessMetadataDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                          type: string, # Optional. The type of the constraint.
                        }
                      ], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                    }
                  ], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: {
                    availableLocales: [string], # Optional. An array of available locales.
                    calendar: number, # Optional.
                    dateInstance: DateFormat, # Optional. The date format.
                    dateTimeInstance: DateFormat, # Optional. The date format.
                    instance: DateFormat, # Optional. The date format.
                    lenient: boolean, # Optional. Determines the leniency of the date format.
                    numberFormat: {
                      availableLocales: [string], # Optional. The number format.
                      currency: string, # Optional. The currency.
                      currencyInstance: NumberFormat, # Optional. The number format.
                      groupingUsed: boolean, # Optional. Determines if grouping is used.
                      instance: NumberFormat, # Optional. The number format.
                      integerInstance: NumberFormat, # Optional. The number format.
                      maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                      maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                      minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                      minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                      numberInstance: NumberFormat, # Optional. The number format.
                      parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                      percentInstance: NumberFormat, # Optional. The number format.
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                    }, # Optional. The number format.
                    timeInstance: DateFormat, # Optional. The date format.
                    timeZone: {
                      dstSavings: number, # Optional. The value of the daylight saving time.
                      id: string, # Optional. The ID of the timezone.
                      availableIds: [string], # Optional. An array of available IDs.
                      default: TimeZone, # Optional. The timezone information.
                      displayName: string, # Optional. The display name of the timezone.
                      rawOffset: number, # Optional. The raw offset of the timezone.
                    }, # Optional. The timezone information.
                  }, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. businessMetadataDefs
              classificationDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                }
              ], # Optional. An array of classification definitions.
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                      isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                      relationshipTypeName: string, # Optional. The name of the relationship type.
                    }
                  ], # Optional. An array of relationship attributes.
                }
              ], # Optional. An array of entity definitions.
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  defaultValue: string, # Optional. The default value.
                  elementDefs: [
                    {
                      description: string, # Optional. The description of the enum element definition.
                      ordinal: number, # Optional. The ordinal of the enum element definition.
                      value: string, # Optional. The value of the enum element definition.
                    }
                  ], # Optional. An array of enum element definitions.
                }
              ], # Optional. An array of enum definitions.
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                    description: string, # Optional. The description of the relationship end definition.
                    isContainer: boolean, # Optional. Determines if it is container.
                    isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                    name: string, # Optional. The name of the relationship end definition.
                    type: string, # Optional. The type of the relationship end.
                  }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
                  relationshipLabel: string, # Optional. The label of the relationship.
                }
              ], # Optional. An array of relationship definitions.
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                }
              ], # Optional. An array of struct definitions.
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. An array of term template definitions.
            }
            </code>
            
            Response Body:
            
            Schema for <c>AtlasTypesDef</c>:
            <code>{
              businessMetadataDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                          type: string, # Optional. The type of the constraint.
                        }
                      ], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                    }
                  ], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: {
                    availableLocales: [string], # Optional. An array of available locales.
                    calendar: number, # Optional.
                    dateInstance: DateFormat, # Optional. The date format.
                    dateTimeInstance: DateFormat, # Optional. The date format.
                    instance: DateFormat, # Optional. The date format.
                    lenient: boolean, # Optional. Determines the leniency of the date format.
                    numberFormat: {
                      availableLocales: [string], # Optional. The number format.
                      currency: string, # Optional. The currency.
                      currencyInstance: NumberFormat, # Optional. The number format.
                      groupingUsed: boolean, # Optional. Determines if grouping is used.
                      instance: NumberFormat, # Optional. The number format.
                      integerInstance: NumberFormat, # Optional. The number format.
                      maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                      maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                      minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                      minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                      numberInstance: NumberFormat, # Optional. The number format.
                      parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                      percentInstance: NumberFormat, # Optional. The number format.
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                    }, # Optional. The number format.
                    timeInstance: DateFormat, # Optional. The date format.
                    timeZone: {
                      dstSavings: number, # Optional. The value of the daylight saving time.
                      id: string, # Optional. The ID of the timezone.
                      availableIds: [string], # Optional. An array of available IDs.
                      default: TimeZone, # Optional. The timezone information.
                      displayName: string, # Optional. The display name of the timezone.
                      rawOffset: number, # Optional. The raw offset of the timezone.
                    }, # Optional. The timezone information.
                  }, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. businessMetadataDefs
              classificationDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                }
              ], # Optional. An array of classification definitions.
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                      isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                      relationshipTypeName: string, # Optional. The name of the relationship type.
                    }
                  ], # Optional. An array of relationship attributes.
                }
              ], # Optional. An array of entity definitions.
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  defaultValue: string, # Optional. The default value.
                  elementDefs: [
                    {
                      description: string, # Optional. The description of the enum element definition.
                      ordinal: number, # Optional. The ordinal of the enum element definition.
                      value: string, # Optional. The value of the enum element definition.
                    }
                  ], # Optional. An array of enum element definitions.
                }
              ], # Optional. An array of enum definitions.
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                    description: string, # Optional. The description of the relationship end definition.
                    isContainer: boolean, # Optional. Determines if it is container.
                    isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                    name: string, # Optional. The name of the relationship end definition.
                    type: string, # Optional. The type of the relationship end.
                  }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
                  relationshipLabel: string, # Optional. The label of the relationship.
                }
              ], # Optional. An array of relationship definitions.
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                }
              ], # Optional. An array of struct definitions.
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. An array of term template definitions.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateTypeDefinitionsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateTypeDefinitionsAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateTypeDefinitionsAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.CreateTypeDefinitionsAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTypeDefinitionsAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateTypeDefinitionsAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateTypeDefinitionsAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.CreateTypeDefinitionsAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            Create all atlas type definitions in bulk, only new definitions will be created.
            Any changes to the existing definitions will be discarded.
            </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>AtlasTypesDef</c>:
            <code>{
              businessMetadataDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                          type: string, # Optional. The type of the constraint.
                        }
                      ], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                    }
                  ], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: {
                    availableLocales: [string], # Optional. An array of available locales.
                    calendar: number, # Optional.
                    dateInstance: DateFormat, # Optional. The date format.
                    dateTimeInstance: DateFormat, # Optional. The date format.
                    instance: DateFormat, # Optional. The date format.
                    lenient: boolean, # Optional. Determines the leniency of the date format.
                    numberFormat: {
                      availableLocales: [string], # Optional. The number format.
                      currency: string, # Optional. The currency.
                      currencyInstance: NumberFormat, # Optional. The number format.
                      groupingUsed: boolean, # Optional. Determines if grouping is used.
                      instance: NumberFormat, # Optional. The number format.
                      integerInstance: NumberFormat, # Optional. The number format.
                      maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                      maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                      minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                      minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                      numberInstance: NumberFormat, # Optional. The number format.
                      parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                      percentInstance: NumberFormat, # Optional. The number format.
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                    }, # Optional. The number format.
                    timeInstance: DateFormat, # Optional. The date format.
                    timeZone: {
                      dstSavings: number, # Optional. The value of the daylight saving time.
                      id: string, # Optional. The ID of the timezone.
                      availableIds: [string], # Optional. An array of available IDs.
                      default: TimeZone, # Optional. The timezone information.
                      displayName: string, # Optional. The display name of the timezone.
                      rawOffset: number, # Optional. The raw offset of the timezone.
                    }, # Optional. The timezone information.
                  }, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. businessMetadataDefs
              classificationDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                }
              ], # Optional. An array of classification definitions.
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                      isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                      relationshipTypeName: string, # Optional. The name of the relationship type.
                    }
                  ], # Optional. An array of relationship attributes.
                }
              ], # Optional. An array of entity definitions.
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  defaultValue: string, # Optional. The default value.
                  elementDefs: [
                    {
                      description: string, # Optional. The description of the enum element definition.
                      ordinal: number, # Optional. The ordinal of the enum element definition.
                      value: string, # Optional. The value of the enum element definition.
                    }
                  ], # Optional. An array of enum element definitions.
                }
              ], # Optional. An array of enum definitions.
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                    description: string, # Optional. The description of the relationship end definition.
                    isContainer: boolean, # Optional. Determines if it is container.
                    isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                    name: string, # Optional. The name of the relationship end definition.
                    type: string, # Optional. The type of the relationship end.
                  }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
                  relationshipLabel: string, # Optional. The label of the relationship.
                }
              ], # Optional. An array of relationship definitions.
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                }
              ], # Optional. An array of struct definitions.
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. An array of term template definitions.
            }
            </code>
            
            Response Body:
            
            Schema for <c>AtlasTypesDef</c>:
            <code>{
              businessMetadataDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                          type: string, # Optional. The type of the constraint.
                        }
                      ], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                    }
                  ], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: {
                    availableLocales: [string], # Optional. An array of available locales.
                    calendar: number, # Optional.
                    dateInstance: DateFormat, # Optional. The date format.
                    dateTimeInstance: DateFormat, # Optional. The date format.
                    instance: DateFormat, # Optional. The date format.
                    lenient: boolean, # Optional. Determines the leniency of the date format.
                    numberFormat: {
                      availableLocales: [string], # Optional. The number format.
                      currency: string, # Optional. The currency.
                      currencyInstance: NumberFormat, # Optional. The number format.
                      groupingUsed: boolean, # Optional. Determines if grouping is used.
                      instance: NumberFormat, # Optional. The number format.
                      integerInstance: NumberFormat, # Optional. The number format.
                      maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                      maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                      minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                      minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                      numberInstance: NumberFormat, # Optional. The number format.
                      parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                      percentInstance: NumberFormat, # Optional. The number format.
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                    }, # Optional. The number format.
                    timeInstance: DateFormat, # Optional. The date format.
                    timeZone: {
                      dstSavings: number, # Optional. The value of the daylight saving time.
                      id: string, # Optional. The ID of the timezone.
                      availableIds: [string], # Optional. An array of available IDs.
                      default: TimeZone, # Optional. The timezone information.
                      displayName: string, # Optional. The display name of the timezone.
                      rawOffset: number, # Optional. The raw offset of the timezone.
                    }, # Optional. The timezone information.
                  }, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. businessMetadataDefs
              classificationDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                }
              ], # Optional. An array of classification definitions.
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                      isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                      relationshipTypeName: string, # Optional. The name of the relationship type.
                    }
                  ], # Optional. An array of relationship attributes.
                }
              ], # Optional. An array of entity definitions.
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  defaultValue: string, # Optional. The default value.
                  elementDefs: [
                    {
                      description: string, # Optional. The description of the enum element definition.
                      ordinal: number, # Optional. The ordinal of the enum element definition.
                      value: string, # Optional. The value of the enum element definition.
                    }
                  ], # Optional. An array of enum element definitions.
                }
              ], # Optional. An array of enum definitions.
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                    description: string, # Optional. The description of the relationship end definition.
                    isContainer: boolean, # Optional. Determines if it is container.
                    isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                    name: string, # Optional. The name of the relationship end definition.
                    type: string, # Optional. The type of the relationship end.
                  }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
                  relationshipLabel: string, # Optional. The label of the relationship.
                }
              ], # Optional. An array of relationship definitions.
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                }
              ], # Optional. An array of struct definitions.
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. An array of term template definitions.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteTypeByName">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteTypeByName (string name, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteTypeByName(string name, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.DeleteTypeByName(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTypeByName (name As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteTypeByName : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteTypeByName : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.DeleteTypeByName (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the type. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Delete API for type identified by its name. </summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteTypeByNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteTypeByNameAsync (string name, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteTypeByNameAsync(string name, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.DeleteTypeByNameAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTypeByNameAsync (name As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteTypeByNameAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteTypeByNameAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.DeleteTypeByNameAsync (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the type. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Delete API for type identified by its name. </summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteTypeDefinitions">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteTypeDefinitions (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteTypeDefinitions(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.DeleteTypeDefinitions(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTypeDefinitions (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteTypeDefinitions : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteTypeDefinitions : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.DeleteTypeDefinitions (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Delete API for all types in bulk. </summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Below is the JSON schema for the request payload.
            
            Request Body:
            
            Schema for <c>AtlasTypesDef</c>:
            <code>{
              businessMetadataDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                          type: string, # Optional. The type of the constraint.
                        }
                      ], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                    }
                  ], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: {
                    availableLocales: [string], # Optional. An array of available locales.
                    calendar: number, # Optional.
                    dateInstance: DateFormat, # Optional. The date format.
                    dateTimeInstance: DateFormat, # Optional. The date format.
                    instance: DateFormat, # Optional. The date format.
                    lenient: boolean, # Optional. Determines the leniency of the date format.
                    numberFormat: {
                      availableLocales: [string], # Optional. The number format.
                      currency: string, # Optional. The currency.
                      currencyInstance: NumberFormat, # Optional. The number format.
                      groupingUsed: boolean, # Optional. Determines if grouping is used.
                      instance: NumberFormat, # Optional. The number format.
                      integerInstance: NumberFormat, # Optional. The number format.
                      maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                      maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                      minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                      minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                      numberInstance: NumberFormat, # Optional. The number format.
                      parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                      percentInstance: NumberFormat, # Optional. The number format.
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                    }, # Optional. The number format.
                    timeInstance: DateFormat, # Optional. The date format.
                    timeZone: {
                      dstSavings: number, # Optional. The value of the daylight saving time.
                      id: string, # Optional. The ID of the timezone.
                      availableIds: [string], # Optional. An array of available IDs.
                      default: TimeZone, # Optional. The timezone information.
                      displayName: string, # Optional. The display name of the timezone.
                      rawOffset: number, # Optional. The raw offset of the timezone.
                    }, # Optional. The timezone information.
                  }, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. businessMetadataDefs
              classificationDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                }
              ], # Optional. An array of classification definitions.
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                      isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                      relationshipTypeName: string, # Optional. The name of the relationship type.
                    }
                  ], # Optional. An array of relationship attributes.
                }
              ], # Optional. An array of entity definitions.
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  defaultValue: string, # Optional. The default value.
                  elementDefs: [
                    {
                      description: string, # Optional. The description of the enum element definition.
                      ordinal: number, # Optional. The ordinal of the enum element definition.
                      value: string, # Optional. The value of the enum element definition.
                    }
                  ], # Optional. An array of enum element definitions.
                }
              ], # Optional. An array of enum definitions.
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                    description: string, # Optional. The description of the relationship end definition.
                    isContainer: boolean, # Optional. Determines if it is container.
                    isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                    name: string, # Optional. The name of the relationship end definition.
                    type: string, # Optional. The type of the relationship end.
                  }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
                  relationshipLabel: string, # Optional. The label of the relationship.
                }
              ], # Optional. An array of relationship definitions.
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                }
              ], # Optional. An array of struct definitions.
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. An array of term template definitions.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteTypeDefinitionsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteTypeDefinitionsAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteTypeDefinitionsAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.DeleteTypeDefinitionsAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTypeDefinitionsAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteTypeDefinitionsAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteTypeDefinitionsAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.DeleteTypeDefinitionsAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Delete API for all types in bulk. </summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Below is the JSON schema for the request payload.
            
            Request Body:
            
            Schema for <c>AtlasTypesDef</c>:
            <code>{
              businessMetadataDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                          type: string, # Optional. The type of the constraint.
                        }
                      ], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                    }
                  ], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: {
                    availableLocales: [string], # Optional. An array of available locales.
                    calendar: number, # Optional.
                    dateInstance: DateFormat, # Optional. The date format.
                    dateTimeInstance: DateFormat, # Optional. The date format.
                    instance: DateFormat, # Optional. The date format.
                    lenient: boolean, # Optional. Determines the leniency of the date format.
                    numberFormat: {
                      availableLocales: [string], # Optional. The number format.
                      currency: string, # Optional. The currency.
                      currencyInstance: NumberFormat, # Optional. The number format.
                      groupingUsed: boolean, # Optional. Determines if grouping is used.
                      instance: NumberFormat, # Optional. The number format.
                      integerInstance: NumberFormat, # Optional. The number format.
                      maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                      maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                      minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                      minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                      numberInstance: NumberFormat, # Optional. The number format.
                      parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                      percentInstance: NumberFormat, # Optional. The number format.
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                    }, # Optional. The number format.
                    timeInstance: DateFormat, # Optional. The date format.
                    timeZone: {
                      dstSavings: number, # Optional. The value of the daylight saving time.
                      id: string, # Optional. The ID of the timezone.
                      availableIds: [string], # Optional. An array of available IDs.
                      default: TimeZone, # Optional. The timezone information.
                      displayName: string, # Optional. The display name of the timezone.
                      rawOffset: number, # Optional. The raw offset of the timezone.
                    }, # Optional. The timezone information.
                  }, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. businessMetadataDefs
              classificationDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                }
              ], # Optional. An array of classification definitions.
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                      isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                      relationshipTypeName: string, # Optional. The name of the relationship type.
                    }
                  ], # Optional. An array of relationship attributes.
                }
              ], # Optional. An array of entity definitions.
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  defaultValue: string, # Optional. The default value.
                  elementDefs: [
                    {
                      description: string, # Optional. The description of the enum element definition.
                      ordinal: number, # Optional. The ordinal of the enum element definition.
                      value: string, # Optional. The value of the enum element definition.
                    }
                  ], # Optional. An array of enum element definitions.
                }
              ], # Optional. An array of enum definitions.
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                    description: string, # Optional. The description of the relationship end definition.
                    isContainer: boolean, # Optional. Determines if it is container.
                    isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                    name: string, # Optional. The name of the relationship end definition.
                    type: string, # Optional. The type of the relationship end.
                  }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
                  relationshipLabel: string, # Optional. The label of the relationship.
                }
              ], # Optional. An array of relationship definitions.
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                }
              ], # Optional. An array of struct definitions.
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. An array of term template definitions.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllTypeDefinitions">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetAllTypeDefinitions (bool? includeTermTemplate = default, string type = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetAllTypeDefinitions(valuetype System.Nullable`1&lt;bool&gt; includeTermTemplate, string type, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetAllTypeDefinitions(System.Nullable{System.Boolean},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllTypeDefinitions (Optional includeTermTemplate As Nullable(Of Boolean) = Nothing, Optional type As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetAllTypeDefinitions : Nullable&lt;bool&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetAllTypeDefinitions : Nullable&lt;bool&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.GetAllTypeDefinitions (includeTermTemplate, type, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeTermTemplate" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="type" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="includeTermTemplate">
            Whether include termtemplatedef when return all typedefs.
            This is always true when search filter type=term_template
            </param>
        <param name="type"> Typedef name as search filter when get typedefs. Allowed values: "enum" | "entity" | "classification" | "relationship" | "struct" | "term_template". </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get all type definitions in Atlas in bulk. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasTypesDef</c>:
            <code>{
              businessMetadataDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                          type: string, # Optional. The type of the constraint.
                        }
                      ], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                    }
                  ], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: {
                    availableLocales: [string], # Optional. An array of available locales.
                    calendar: number, # Optional.
                    dateInstance: DateFormat, # Optional. The date format.
                    dateTimeInstance: DateFormat, # Optional. The date format.
                    instance: DateFormat, # Optional. The date format.
                    lenient: boolean, # Optional. Determines the leniency of the date format.
                    numberFormat: {
                      availableLocales: [string], # Optional. The number format.
                      currency: string, # Optional. The currency.
                      currencyInstance: NumberFormat, # Optional. The number format.
                      groupingUsed: boolean, # Optional. Determines if grouping is used.
                      instance: NumberFormat, # Optional. The number format.
                      integerInstance: NumberFormat, # Optional. The number format.
                      maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                      maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                      minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                      minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                      numberInstance: NumberFormat, # Optional. The number format.
                      parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                      percentInstance: NumberFormat, # Optional. The number format.
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                    }, # Optional. The number format.
                    timeInstance: DateFormat, # Optional. The date format.
                    timeZone: {
                      dstSavings: number, # Optional. The value of the daylight saving time.
                      id: string, # Optional. The ID of the timezone.
                      availableIds: [string], # Optional. An array of available IDs.
                      default: TimeZone, # Optional. The timezone information.
                      displayName: string, # Optional. The display name of the timezone.
                      rawOffset: number, # Optional. The raw offset of the timezone.
                    }, # Optional. The timezone information.
                  }, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. businessMetadataDefs
              classificationDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                }
              ], # Optional. An array of classification definitions.
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                      isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                      relationshipTypeName: string, # Optional. The name of the relationship type.
                    }
                  ], # Optional. An array of relationship attributes.
                }
              ], # Optional. An array of entity definitions.
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  defaultValue: string, # Optional. The default value.
                  elementDefs: [
                    {
                      description: string, # Optional. The description of the enum element definition.
                      ordinal: number, # Optional. The ordinal of the enum element definition.
                      value: string, # Optional. The value of the enum element definition.
                    }
                  ], # Optional. An array of enum element definitions.
                }
              ], # Optional. An array of enum definitions.
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                    description: string, # Optional. The description of the relationship end definition.
                    isContainer: boolean, # Optional. Determines if it is container.
                    isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                    name: string, # Optional. The name of the relationship end definition.
                    type: string, # Optional. The type of the relationship end.
                  }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
                  relationshipLabel: string, # Optional. The label of the relationship.
                }
              ], # Optional. An array of relationship definitions.
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                }
              ], # Optional. An array of struct definitions.
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. An array of term template definitions.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllTypeDefinitionsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetAllTypeDefinitionsAsync (bool? includeTermTemplate = default, string type = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetAllTypeDefinitionsAsync(valuetype System.Nullable`1&lt;bool&gt; includeTermTemplate, string type, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetAllTypeDefinitionsAsync(System.Nullable{System.Boolean},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllTypeDefinitionsAsync (Optional includeTermTemplate As Nullable(Of Boolean) = Nothing, Optional type As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetAllTypeDefinitionsAsync : Nullable&lt;bool&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetAllTypeDefinitionsAsync : Nullable&lt;bool&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetAllTypeDefinitionsAsync (includeTermTemplate, type, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeTermTemplate" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="type" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="includeTermTemplate">
            Whether include termtemplatedef when return all typedefs.
            This is always true when search filter type=term_template
            </param>
        <param name="type"> Typedef name as search filter when get typedefs. Allowed values: "enum" | "entity" | "classification" | "relationship" | "struct" | "term_template". </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get all type definitions in Atlas in bulk. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasTypesDef</c>:
            <code>{
              businessMetadataDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                          type: string, # Optional. The type of the constraint.
                        }
                      ], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                    }
                  ], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: {
                    availableLocales: [string], # Optional. An array of available locales.
                    calendar: number, # Optional.
                    dateInstance: DateFormat, # Optional. The date format.
                    dateTimeInstance: DateFormat, # Optional. The date format.
                    instance: DateFormat, # Optional. The date format.
                    lenient: boolean, # Optional. Determines the leniency of the date format.
                    numberFormat: {
                      availableLocales: [string], # Optional. The number format.
                      currency: string, # Optional. The currency.
                      currencyInstance: NumberFormat, # Optional. The number format.
                      groupingUsed: boolean, # Optional. Determines if grouping is used.
                      instance: NumberFormat, # Optional. The number format.
                      integerInstance: NumberFormat, # Optional. The number format.
                      maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                      maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                      minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                      minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                      numberInstance: NumberFormat, # Optional. The number format.
                      parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                      percentInstance: NumberFormat, # Optional. The number format.
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                    }, # Optional. The number format.
                    timeInstance: DateFormat, # Optional. The date format.
                    timeZone: {
                      dstSavings: number, # Optional. The value of the daylight saving time.
                      id: string, # Optional. The ID of the timezone.
                      availableIds: [string], # Optional. An array of available IDs.
                      default: TimeZone, # Optional. The timezone information.
                      displayName: string, # Optional. The display name of the timezone.
                      rawOffset: number, # Optional. The raw offset of the timezone.
                    }, # Optional. The timezone information.
                  }, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. businessMetadataDefs
              classificationDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                }
              ], # Optional. An array of classification definitions.
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                      isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                      relationshipTypeName: string, # Optional. The name of the relationship type.
                    }
                  ], # Optional. An array of relationship attributes.
                }
              ], # Optional. An array of entity definitions.
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  defaultValue: string, # Optional. The default value.
                  elementDefs: [
                    {
                      description: string, # Optional. The description of the enum element definition.
                      ordinal: number, # Optional. The ordinal of the enum element definition.
                      value: string, # Optional. The value of the enum element definition.
                    }
                  ], # Optional. An array of enum element definitions.
                }
              ], # Optional. An array of enum definitions.
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                    description: string, # Optional. The description of the relationship end definition.
                    isContainer: boolean, # Optional. Determines if it is container.
                    isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                    name: string, # Optional. The name of the relationship end definition.
                    type: string, # Optional. The type of the relationship end.
                  }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
                  relationshipLabel: string, # Optional. The label of the relationship.
                }
              ], # Optional. An array of relationship definitions.
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                }
              ], # Optional. An array of struct definitions.
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. An array of term template definitions.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetBusinessMetadataDefByGuid">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetBusinessMetadataDefByGuid (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetBusinessMetadataDefByGuid(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetBusinessMetadataDefByGuid(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBusinessMetadataDefByGuid (guid As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetBusinessMetadataDefByGuid : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetBusinessMetadataDefByGuid : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.GetBusinessMetadataDefByGuid (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> businessMetadata guid. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the businessMetadata definition for the given guid. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasBusinessMetadataDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetBusinessMetadataDefByGuidAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetBusinessMetadataDefByGuidAsync (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetBusinessMetadataDefByGuidAsync(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetBusinessMetadataDefByGuidAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBusinessMetadataDefByGuidAsync (guid As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetBusinessMetadataDefByGuidAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetBusinessMetadataDefByGuidAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetBusinessMetadataDefByGuidAsync (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> businessMetadata guid. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the businessMetadata definition for the given guid. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasBusinessMetadataDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetBusinessMetadataDefByName">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetBusinessMetadataDefByName (string name, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetBusinessMetadataDefByName(string name, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetBusinessMetadataDefByName(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBusinessMetadataDefByName (name As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetBusinessMetadataDefByName : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetBusinessMetadataDefByName : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.GetBusinessMetadataDefByName (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="name"> businessMetadata name. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the businessMetadata definition by it's name (unique). </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasBusinessMetadataDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetBusinessMetadataDefByNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetBusinessMetadataDefByNameAsync (string name, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetBusinessMetadataDefByNameAsync(string name, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetBusinessMetadataDefByNameAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBusinessMetadataDefByNameAsync (name As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetBusinessMetadataDefByNameAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetBusinessMetadataDefByNameAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetBusinessMetadataDefByNameAsync (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="name"> businessMetadata name. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the businessMetadata definition by it's name (unique). </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasBusinessMetadataDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClassificationDefByGuid">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetClassificationDefByGuid (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetClassificationDefByGuid(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetClassificationDefByGuid(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClassificationDefByGuid (guid As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetClassificationDefByGuid : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetClassificationDefByGuid : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.GetClassificationDefByGuid (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the classification. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the classification definition for the given GUID. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasClassificationDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
              subTypes: [string], # Optional. An array of sub types.
              superTypes: [string], # Optional. An array of super types.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClassificationDefByGuidAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetClassificationDefByGuidAsync (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetClassificationDefByGuidAsync(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetClassificationDefByGuidAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClassificationDefByGuidAsync (guid As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetClassificationDefByGuidAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetClassificationDefByGuidAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetClassificationDefByGuidAsync (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the classification. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the classification definition for the given GUID. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasClassificationDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
              subTypes: [string], # Optional. An array of sub types.
              superTypes: [string], # Optional. An array of super types.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClassificationDefByName">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetClassificationDefByName (string name, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetClassificationDefByName(string name, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetClassificationDefByName(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClassificationDefByName (name As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetClassificationDefByName : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetClassificationDefByName : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.GetClassificationDefByName (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the classification. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the classification definition by its name (unique). </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasClassificationDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
              subTypes: [string], # Optional. An array of sub types.
              superTypes: [string], # Optional. An array of super types.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClassificationDefByNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetClassificationDefByNameAsync (string name, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetClassificationDefByNameAsync(string name, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetClassificationDefByNameAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClassificationDefByNameAsync (name As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetClassificationDefByNameAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetClassificationDefByNameAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetClassificationDefByNameAsync (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the classification. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the classification definition by its name (unique). </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasClassificationDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
              subTypes: [string], # Optional. An array of sub types.
              superTypes: [string], # Optional. An array of super types.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntityDefinitionByGuid">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetEntityDefinitionByGuid (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetEntityDefinitionByGuid(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetEntityDefinitionByGuid(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntityDefinitionByGuid (guid As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetEntityDefinitionByGuid : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetEntityDefinitionByGuid : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.GetEntityDefinitionByGuid (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the Entity definition for the given GUID. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasEntityDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              subTypes: [string], # Optional. An array of sub types.
              superTypes: [string], # Optional. An array of super types.
              relationshipAttributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                  isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                  relationshipTypeName: string, # Optional. The name of the relationship type.
                }
              ], # Optional. An array of relationship attributes.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntityDefinitionByGuidAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetEntityDefinitionByGuidAsync (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetEntityDefinitionByGuidAsync(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetEntityDefinitionByGuidAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntityDefinitionByGuidAsync (guid As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetEntityDefinitionByGuidAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetEntityDefinitionByGuidAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetEntityDefinitionByGuidAsync (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the Entity definition for the given GUID. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasEntityDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              subTypes: [string], # Optional. An array of sub types.
              superTypes: [string], # Optional. An array of super types.
              relationshipAttributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                  isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                  relationshipTypeName: string, # Optional. The name of the relationship type.
                }
              ], # Optional. An array of relationship attributes.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntityDefinitionByName">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetEntityDefinitionByName (string name, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetEntityDefinitionByName(string name, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetEntityDefinitionByName(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntityDefinitionByName (name As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetEntityDefinitionByName : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetEntityDefinitionByName : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.GetEntityDefinitionByName (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the entity. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the entity definition by its name (unique). </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasEntityDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              subTypes: [string], # Optional. An array of sub types.
              superTypes: [string], # Optional. An array of super types.
              relationshipAttributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                  isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                  relationshipTypeName: string, # Optional. The name of the relationship type.
                }
              ], # Optional. An array of relationship attributes.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntityDefinitionByNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetEntityDefinitionByNameAsync (string name, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetEntityDefinitionByNameAsync(string name, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetEntityDefinitionByNameAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntityDefinitionByNameAsync (name As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetEntityDefinitionByNameAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetEntityDefinitionByNameAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetEntityDefinitionByNameAsync (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the entity. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the entity definition by its name (unique). </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasEntityDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              subTypes: [string], # Optional. An array of sub types.
              superTypes: [string], # Optional. An array of super types.
              relationshipAttributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                  isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                  relationshipTypeName: string, # Optional. The name of the relationship type.
                }
              ], # Optional. An array of relationship attributes.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumDefByGuid">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetEnumDefByGuid (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetEnumDefByGuid(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetEnumDefByGuid(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumDefByGuid (guid As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetEnumDefByGuid : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetEnumDefByGuid : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.GetEnumDefByGuid (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the enum. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the enum definition for the given GUID. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasEnumDef</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              defaultValue: string, # Optional. The default value.
              elementDefs: [
                {
                  description: string, # Optional. The description of the enum element definition.
                  ordinal: number, # Optional. The ordinal of the enum element definition.
                  value: string, # Optional. The value of the enum element definition.
                }
              ], # Optional. An array of enum element definitions.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumDefByGuidAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetEnumDefByGuidAsync (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetEnumDefByGuidAsync(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetEnumDefByGuidAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumDefByGuidAsync (guid As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetEnumDefByGuidAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetEnumDefByGuidAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetEnumDefByGuidAsync (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the enum. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the enum definition for the given GUID. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasEnumDef</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              defaultValue: string, # Optional. The default value.
              elementDefs: [
                {
                  description: string, # Optional. The description of the enum element definition.
                  ordinal: number, # Optional. The ordinal of the enum element definition.
                  value: string, # Optional. The value of the enum element definition.
                }
              ], # Optional. An array of enum element definitions.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumDefByName">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetEnumDefByName (string name, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetEnumDefByName(string name, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetEnumDefByName(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumDefByName (name As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetEnumDefByName : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetEnumDefByName : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.GetEnumDefByName (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the enum. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the enum definition by its name (unique). </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasEnumDef</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              defaultValue: string, # Optional. The default value.
              elementDefs: [
                {
                  description: string, # Optional. The description of the enum element definition.
                  ordinal: number, # Optional. The ordinal of the enum element definition.
                  value: string, # Optional. The value of the enum element definition.
                }
              ], # Optional. An array of enum element definitions.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumDefByNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetEnumDefByNameAsync (string name, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetEnumDefByNameAsync(string name, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetEnumDefByNameAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumDefByNameAsync (name As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetEnumDefByNameAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetEnumDefByNameAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetEnumDefByNameAsync (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the enum. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the enum definition by its name (unique). </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasEnumDef</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              defaultValue: string, # Optional. The default value.
              elementDefs: [
                {
                  description: string, # Optional. The description of the enum element definition.
                  ordinal: number, # Optional. The ordinal of the enum element definition.
                  value: string, # Optional. The value of the enum element definition.
                }
              ], # Optional. An array of enum element definitions.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipDefByGuid">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetRelationshipDefByGuid (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetRelationshipDefByGuid(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetRelationshipDefByGuid(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelationshipDefByGuid (guid As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetRelationshipDefByGuid : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetRelationshipDefByGuid : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.GetRelationshipDefByGuid (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the relationship. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the relationship definition for the given GUID. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasRelationshipDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              endDef1: {
                cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                description: string, # Optional. The description of the relationship end definition.
                isContainer: boolean, # Optional. Determines if it is container.
                isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                name: string, # Optional. The name of the relationship end definition.
                type: string, # Optional. The type of the relationship end.
              }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
              relationshipLabel: string, # Optional. The label of the relationship.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipDefByGuidAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetRelationshipDefByGuidAsync (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetRelationshipDefByGuidAsync(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetRelationshipDefByGuidAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelationshipDefByGuidAsync (guid As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetRelationshipDefByGuidAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetRelationshipDefByGuidAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetRelationshipDefByGuidAsync (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the relationship. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the relationship definition for the given GUID. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasRelationshipDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              endDef1: {
                cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                description: string, # Optional. The description of the relationship end definition.
                isContainer: boolean, # Optional. Determines if it is container.
                isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                name: string, # Optional. The name of the relationship end definition.
                type: string, # Optional. The type of the relationship end.
              }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
              relationshipLabel: string, # Optional. The label of the relationship.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipDefByName">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetRelationshipDefByName (string name, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetRelationshipDefByName(string name, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetRelationshipDefByName(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelationshipDefByName (name As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetRelationshipDefByName : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetRelationshipDefByName : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.GetRelationshipDefByName (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the relationship. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the relationship definition by its name (unique). </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasRelationshipDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              endDef1: {
                cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                description: string, # Optional. The description of the relationship end definition.
                isContainer: boolean, # Optional. Determines if it is container.
                isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                name: string, # Optional. The name of the relationship end definition.
                type: string, # Optional. The type of the relationship end.
              }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
              relationshipLabel: string, # Optional. The label of the relationship.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipDefByNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetRelationshipDefByNameAsync (string name, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetRelationshipDefByNameAsync(string name, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetRelationshipDefByNameAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelationshipDefByNameAsync (name As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetRelationshipDefByNameAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetRelationshipDefByNameAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetRelationshipDefByNameAsync (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the relationship. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the relationship definition by its name (unique). </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasRelationshipDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              endDef1: {
                cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                description: string, # Optional. The description of the relationship end definition.
                isContainer: boolean, # Optional. Determines if it is container.
                isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                name: string, # Optional. The name of the relationship end definition.
                type: string, # Optional. The type of the relationship end.
              }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
              relationshipLabel: string, # Optional. The label of the relationship.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetStructDefByGuid">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetStructDefByGuid (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetStructDefByGuid(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetStructDefByGuid(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetStructDefByGuid (guid As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetStructDefByGuid : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetStructDefByGuid : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.GetStructDefByGuid (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the struct. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the struct definition for the given GUID. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
            <details><summary>AtlasBusinessMetadataDef</summary>Schema for <c>AtlasBusinessMetadataDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
            }
            </code></details><details><summary>~+ 4 more JSON objects</summary><details><summary>AtlasClassificationDef</summary>Schema for <c>AtlasClassificationDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
              subTypes: [string], # Optional. An array of sub types.
              superTypes: [string], # Optional. An array of super types.
            }
            </code></details><details><summary>AtlasEntityDef</summary>Schema for <c>AtlasEntityDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              subTypes: [string], # Optional. An array of sub types.
              superTypes: [string], # Optional. An array of super types.
              relationshipAttributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                  isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                  relationshipTypeName: string, # Optional. The name of the relationship type.
                }
              ], # Optional. An array of relationship attributes.
            }
            </code></details><details><summary>AtlasRelationshipDef</summary>Schema for <c>AtlasRelationshipDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              endDef1: {
                cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                description: string, # Optional. The description of the relationship end definition.
                isContainer: boolean, # Optional. Determines if it is container.
                isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                name: string, # Optional. The name of the relationship end definition.
                type: string, # Optional. The type of the relationship end.
              }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
              relationshipLabel: string, # Optional. The label of the relationship.
            }
            </code></details><details><summary>TermTemplateDef</summary>Schema for <c>TermTemplateDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
            }
            </code></details></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetStructDefByGuidAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetStructDefByGuidAsync (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetStructDefByGuidAsync(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetStructDefByGuidAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetStructDefByGuidAsync (guid As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetStructDefByGuidAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetStructDefByGuidAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetStructDefByGuidAsync (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the struct. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the struct definition for the given GUID. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
            <details><summary>AtlasBusinessMetadataDef</summary>Schema for <c>AtlasBusinessMetadataDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
            }
            </code></details><details><summary>~+ 4 more JSON objects</summary><details><summary>AtlasClassificationDef</summary>Schema for <c>AtlasClassificationDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
              subTypes: [string], # Optional. An array of sub types.
              superTypes: [string], # Optional. An array of super types.
            }
            </code></details><details><summary>AtlasEntityDef</summary>Schema for <c>AtlasEntityDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              subTypes: [string], # Optional. An array of sub types.
              superTypes: [string], # Optional. An array of super types.
              relationshipAttributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                  isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                  relationshipTypeName: string, # Optional. The name of the relationship type.
                }
              ], # Optional. An array of relationship attributes.
            }
            </code></details><details><summary>AtlasRelationshipDef</summary>Schema for <c>AtlasRelationshipDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              endDef1: {
                cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                description: string, # Optional. The description of the relationship end definition.
                isContainer: boolean, # Optional. Determines if it is container.
                isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                name: string, # Optional. The name of the relationship end definition.
                type: string, # Optional. The type of the relationship end.
              }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
              relationshipLabel: string, # Optional. The label of the relationship.
            }
            </code></details><details><summary>TermTemplateDef</summary>Schema for <c>TermTemplateDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
            }
            </code></details></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetStructDefByName">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetStructDefByName (string name, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetStructDefByName(string name, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetStructDefByName(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetStructDefByName (name As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetStructDefByName : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetStructDefByName : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.GetStructDefByName (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the struct. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the struct definition by its name (unique). </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
            <details><summary>AtlasBusinessMetadataDef</summary>Schema for <c>AtlasBusinessMetadataDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
            }
            </code></details><details><summary>~+ 4 more JSON objects</summary><details><summary>AtlasClassificationDef</summary>Schema for <c>AtlasClassificationDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
              subTypes: [string], # Optional. An array of sub types.
              superTypes: [string], # Optional. An array of super types.
            }
            </code></details><details><summary>AtlasEntityDef</summary>Schema for <c>AtlasEntityDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              subTypes: [string], # Optional. An array of sub types.
              superTypes: [string], # Optional. An array of super types.
              relationshipAttributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                  isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                  relationshipTypeName: string, # Optional. The name of the relationship type.
                }
              ], # Optional. An array of relationship attributes.
            }
            </code></details><details><summary>AtlasRelationshipDef</summary>Schema for <c>AtlasRelationshipDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              endDef1: {
                cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                description: string, # Optional. The description of the relationship end definition.
                isContainer: boolean, # Optional. Determines if it is container.
                isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                name: string, # Optional. The name of the relationship end definition.
                type: string, # Optional. The type of the relationship end.
              }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
              relationshipLabel: string, # Optional. The label of the relationship.
            }
            </code></details><details><summary>TermTemplateDef</summary>Schema for <c>TermTemplateDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
            }
            </code></details></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetStructDefByNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetStructDefByNameAsync (string name, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetStructDefByNameAsync(string name, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetStructDefByNameAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetStructDefByNameAsync (name As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetStructDefByNameAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetStructDefByNameAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetStructDefByNameAsync (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the struct. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the struct definition by its name (unique). </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
            <details><summary>AtlasBusinessMetadataDef</summary>Schema for <c>AtlasBusinessMetadataDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
            }
            </code></details><details><summary>~+ 4 more JSON objects</summary><details><summary>AtlasClassificationDef</summary>Schema for <c>AtlasClassificationDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
              subTypes: [string], # Optional. An array of sub types.
              superTypes: [string], # Optional. An array of super types.
            }
            </code></details><details><summary>AtlasEntityDef</summary>Schema for <c>AtlasEntityDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              subTypes: [string], # Optional. An array of sub types.
              superTypes: [string], # Optional. An array of super types.
              relationshipAttributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                  isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                  relationshipTypeName: string, # Optional. The name of the relationship type.
                }
              ], # Optional. An array of relationship attributes.
            }
            </code></details><details><summary>AtlasRelationshipDef</summary>Schema for <c>AtlasRelationshipDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              endDef1: {
                cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                description: string, # Optional. The description of the relationship end definition.
                isContainer: boolean, # Optional. Determines if it is container.
                isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                name: string, # Optional. The name of the relationship end definition.
                type: string, # Optional. The type of the relationship end.
              }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
              relationshipLabel: string, # Optional. The label of the relationship.
            }
            </code></details><details><summary>TermTemplateDef</summary>Schema for <c>TermTemplateDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
            }
            </code></details></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTermTemplateDefByGuid">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTermTemplateDefByGuid (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTermTemplateDefByGuid(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetTermTemplateDefByGuid(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTermTemplateDefByGuid (guid As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTermTemplateDefByGuid : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetTermTemplateDefByGuid : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.GetTermTemplateDefByGuid (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the term template. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the term template definition for the given GUID. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>TermTemplateDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTermTemplateDefByGuidAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTermTemplateDefByGuidAsync (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTermTemplateDefByGuidAsync(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetTermTemplateDefByGuidAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTermTemplateDefByGuidAsync (guid As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTermTemplateDefByGuidAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTermTemplateDefByGuidAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetTermTemplateDefByGuidAsync (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the term template. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the term template definition for the given GUID. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>TermTemplateDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTermTemplateDefByName">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTermTemplateDefByName (string name, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTermTemplateDefByName(string name, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetTermTemplateDefByName(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTermTemplateDefByName (name As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTermTemplateDefByName : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetTermTemplateDefByName : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.GetTermTemplateDefByName (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the term template. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the term template definition by its name (unique). </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>TermTemplateDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTermTemplateDefByNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTermTemplateDefByNameAsync (string name, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTermTemplateDefByNameAsync(string name, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetTermTemplateDefByNameAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTermTemplateDefByNameAsync (name As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTermTemplateDefByNameAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTermTemplateDefByNameAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetTermTemplateDefByNameAsync (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the term template. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the term template definition by its name (unique). </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>TermTemplateDef</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeDefinitionByGuid">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTypeDefinitionByGuid (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTypeDefinitionByGuid(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetTypeDefinitionByGuid(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeDefinitionByGuid (guid As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTypeDefinitionByGuid : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetTypeDefinitionByGuid : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.GetTypeDefinitionByGuid (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the type. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the type definition for the given GUID. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasTypeDef</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
              subTypes: [string], # Optional. An array of sub types.
              superTypes: [string], # Optional. An array of super types.
              relationshipAttributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                  isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                  relationshipTypeName: string, # Optional. The name of the relationship type.
                }
              ], # Optional. An array of relationship attributes.
              defaultValue: string, # Optional. The default value.
              elementDefs: [
                {
                  description: string, # Optional. The description of the enum element definition.
                  ordinal: number, # Optional. The ordinal of the enum element definition.
                  value: string, # Optional. The value of the enum element definition.
                }
              ], # Optional. An array of enum element definitions.
              endDef1: {
                cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                description: string, # Optional. The description of the relationship end definition.
                isContainer: boolean, # Optional. Determines if it is container.
                isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                name: string, # Optional. The name of the relationship end definition.
                type: string, # Optional. The type of the relationship end.
              }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
              relationshipLabel: string, # Optional. The label of the relationship.
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeDefinitionByGuidAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTypeDefinitionByGuidAsync (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTypeDefinitionByGuidAsync(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetTypeDefinitionByGuidAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeDefinitionByGuidAsync (guid As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTypeDefinitionByGuidAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTypeDefinitionByGuidAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetTypeDefinitionByGuidAsync (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the type. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the type definition for the given GUID. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasTypeDef</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
              subTypes: [string], # Optional. An array of sub types.
              superTypes: [string], # Optional. An array of super types.
              relationshipAttributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                  isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                  relationshipTypeName: string, # Optional. The name of the relationship type.
                }
              ], # Optional. An array of relationship attributes.
              defaultValue: string, # Optional. The default value.
              elementDefs: [
                {
                  description: string, # Optional. The description of the enum element definition.
                  ordinal: number, # Optional. The ordinal of the enum element definition.
                  value: string, # Optional. The value of the enum element definition.
                }
              ], # Optional. An array of enum element definitions.
              endDef1: {
                cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                description: string, # Optional. The description of the relationship end definition.
                isContainer: boolean, # Optional. Determines if it is container.
                isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                name: string, # Optional. The name of the relationship end definition.
                type: string, # Optional. The type of the relationship end.
              }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
              relationshipLabel: string, # Optional. The label of the relationship.
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeDefinitionByName">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTypeDefinitionByName (string name, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTypeDefinitionByName(string name, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetTypeDefinitionByName(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeDefinitionByName (name As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTypeDefinitionByName : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetTypeDefinitionByName : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.GetTypeDefinitionByName (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the type. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the type definition by its name (unique). </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasTypeDef</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
              subTypes: [string], # Optional. An array of sub types.
              superTypes: [string], # Optional. An array of super types.
              relationshipAttributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                  isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                  relationshipTypeName: string, # Optional. The name of the relationship type.
                }
              ], # Optional. An array of relationship attributes.
              defaultValue: string, # Optional. The default value.
              elementDefs: [
                {
                  description: string, # Optional. The description of the enum element definition.
                  ordinal: number, # Optional. The ordinal of the enum element definition.
                  value: string, # Optional. The value of the enum element definition.
                }
              ], # Optional. An array of enum element definitions.
              endDef1: {
                cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                description: string, # Optional. The description of the relationship end definition.
                isContainer: boolean, # Optional. Determines if it is container.
                isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                name: string, # Optional. The name of the relationship end definition.
                type: string, # Optional. The type of the relationship end.
              }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
              relationshipLabel: string, # Optional. The label of the relationship.
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeDefinitionByNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTypeDefinitionByNameAsync (string name, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTypeDefinitionByNameAsync(string name, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetTypeDefinitionByNameAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeDefinitionByNameAsync (name As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTypeDefinitionByNameAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTypeDefinitionByNameAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetTypeDefinitionByNameAsync (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the type. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the type definition by its name (unique). </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AtlasTypeDef</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              createTime: number, # Optional. The created time of the record.
              createdBy: string, # Optional. The user who created the record.
              dateFormatter: {
                availableLocales: [string], # Optional. An array of available locales.
                calendar: number, # Optional.
                dateInstance: DateFormat, # Optional. The date format.
                dateTimeInstance: DateFormat, # Optional. The date format.
                instance: DateFormat, # Optional. The date format.
                lenient: boolean, # Optional. Determines the leniency of the date format.
                numberFormat: {
                  availableLocales: [string], # Optional. The number format.
                  currency: string, # Optional. The currency.
                  currencyInstance: NumberFormat, # Optional. The number format.
                  groupingUsed: boolean, # Optional. Determines if grouping is used.
                  instance: NumberFormat, # Optional. The number format.
                  integerInstance: NumberFormat, # Optional. The number format.
                  maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                  maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                  minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                  minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                  numberInstance: NumberFormat, # Optional. The number format.
                  parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                  percentInstance: NumberFormat, # Optional. The number format.
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                }, # Optional. The number format.
                timeInstance: DateFormat, # Optional. The date format.
                timeZone: {
                  dstSavings: number, # Optional. The value of the daylight saving time.
                  id: string, # Optional. The ID of the timezone.
                  availableIds: [string], # Optional. An array of available IDs.
                  default: TimeZone, # Optional. The timezone information.
                  displayName: string, # Optional. The display name of the timezone.
                  rawOffset: number, # Optional. The raw offset of the timezone.
                }, # Optional. The timezone information.
              }, # Optional. The date format.
              description: string, # Optional. The description of the type definition.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
              options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
              serviceType: string, # Optional. The service type.
              typeVersion: string, # Optional. The version of the type.
              updateTime: number, # Optional. The update time of the record.
              updatedBy: string, # Optional. The user who updated the record.
              version: number, # Optional. The version of the record.
              lastModifiedTS: string, # Optional. ETag for concurrency control.
              entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
              subTypes: [string], # Optional. An array of sub types.
              superTypes: [string], # Optional. An array of super types.
              relationshipAttributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                      type: string, # Optional. The type of the constraint.
                    }
                  ], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                  isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                  relationshipTypeName: string, # Optional. The name of the relationship type.
                }
              ], # Optional. An array of relationship attributes.
              defaultValue: string, # Optional. The default value.
              elementDefs: [
                {
                  description: string, # Optional. The description of the enum element definition.
                  ordinal: number, # Optional. The ordinal of the enum element definition.
                  value: string, # Optional. The value of the enum element definition.
                }
              ], # Optional. An array of enum element definitions.
              endDef1: {
                cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                description: string, # Optional. The description of the relationship end definition.
                isContainer: boolean, # Optional. Determines if it is container.
                isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                name: string, # Optional. The name of the relationship end definition.
                type: string, # Optional. The type of the relationship end.
              }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
              relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
              relationshipLabel: string, # Optional. The label of the relationship.
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                  constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                  defaultValue: string, # Optional. The default value of the attribute.
                  description: string, # Optional. The description of the attribute.
                  includeInNotification: boolean, # Optional. Determines if it is included in notification.
                  isIndexable: boolean, # Optional. Determines if it is indexable.
                  isOptional: boolean, # Optional. Determines if it is optional.
                  isUnique: boolean, # Optional. Determines if it unique.
                  name: string, # Optional. The name of the attribute.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                  typeName: string, # Optional. The name of the type.
                  valuesMaxCount: number, # Optional. The maximum count of the values.
                  valuesMinCount: number, # Optional. The minimum count of the values.
                }
              ], # Optional. An array of attribute definitions.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeDefinitionHeaders">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTypeDefinitionHeaders (bool? includeTermTemplate = default, string type = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTypeDefinitionHeaders(valuetype System.Nullable`1&lt;bool&gt; includeTermTemplate, string type, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetTypeDefinitionHeaders(System.Nullable{System.Boolean},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeDefinitionHeaders (Optional includeTermTemplate As Nullable(Of Boolean) = Nothing, Optional type As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTypeDefinitionHeaders : Nullable&lt;bool&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetTypeDefinitionHeaders : Nullable&lt;bool&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.GetTypeDefinitionHeaders (includeTermTemplate, type, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeTermTemplate" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="type" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="includeTermTemplate">
            Whether include termtemplatedef when return all typedefs.
            This is always true when search filter type=term_template
            </param>
        <param name="type"> Typedef name as search filter when get typedefs. Allowed values: "enum" | "entity" | "classification" | "relationship" | "struct" | "term_template". </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> List all type definitions returned as a list of minimal information header. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>ArrayOfAtlasTypeDefHeader</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeDefinitionHeadersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTypeDefinitionHeadersAsync (bool? includeTermTemplate = default, string type = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTypeDefinitionHeadersAsync(valuetype System.Nullable`1&lt;bool&gt; includeTermTemplate, string type, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetTypeDefinitionHeadersAsync(System.Nullable{System.Boolean},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeDefinitionHeadersAsync (Optional includeTermTemplate As Nullable(Of Boolean) = Nothing, Optional type As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTypeDefinitionHeadersAsync : Nullable&lt;bool&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTypeDefinitionHeadersAsync : Nullable&lt;bool&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetTypeDefinitionHeadersAsync (includeTermTemplate, type, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeTermTemplate" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="type" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="includeTermTemplate">
            Whether include termtemplatedef when return all typedefs.
            This is always true when search filter type=term_template
            </param>
        <param name="type"> Typedef name as search filter when get typedefs. Allowed values: "enum" | "entity" | "classification" | "relationship" | "struct" | "term_template". </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> List all type definitions returned as a list of minimal information header. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>ArrayOfAtlasTypeDefHeader</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
              guid: string, # Optional. The GUID of the type definition.
              name: string, # Optional. The name of the type definition.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Analytics.Purview.Catalog.PurviewTypes.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Analytics.Purview.Catalog.PurviewTypes.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateAtlasTypeDefinitions">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateAtlasTypeDefinitions (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateAtlasTypeDefinitions(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.UpdateAtlasTypeDefinitions(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAtlasTypeDefinitions (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateAtlasTypeDefinitions : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateAtlasTypeDefinitions : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewTypes.UpdateAtlasTypeDefinitions (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Update all types in bulk, changes detected in the type definitions would be persisted. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>AtlasTypesDef</c>:
            <code>{
              businessMetadataDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                          type: string, # Optional. The type of the constraint.
                        }
                      ], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                    }
                  ], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: {
                    availableLocales: [string], # Optional. An array of available locales.
                    calendar: number, # Optional.
                    dateInstance: DateFormat, # Optional. The date format.
                    dateTimeInstance: DateFormat, # Optional. The date format.
                    instance: DateFormat, # Optional. The date format.
                    lenient: boolean, # Optional. Determines the leniency of the date format.
                    numberFormat: {
                      availableLocales: [string], # Optional. The number format.
                      currency: string, # Optional. The currency.
                      currencyInstance: NumberFormat, # Optional. The number format.
                      groupingUsed: boolean, # Optional. Determines if grouping is used.
                      instance: NumberFormat, # Optional. The number format.
                      integerInstance: NumberFormat, # Optional. The number format.
                      maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                      maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                      minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                      minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                      numberInstance: NumberFormat, # Optional. The number format.
                      parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                      percentInstance: NumberFormat, # Optional. The number format.
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                    }, # Optional. The number format.
                    timeInstance: DateFormat, # Optional. The date format.
                    timeZone: {
                      dstSavings: number, # Optional. The value of the daylight saving time.
                      id: string, # Optional. The ID of the timezone.
                      availableIds: [string], # Optional. An array of available IDs.
                      default: TimeZone, # Optional. The timezone information.
                      displayName: string, # Optional. The display name of the timezone.
                      rawOffset: number, # Optional. The raw offset of the timezone.
                    }, # Optional. The timezone information.
                  }, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. businessMetadataDefs
              classificationDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                }
              ], # Optional. An array of classification definitions.
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                      isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                      relationshipTypeName: string, # Optional. The name of the relationship type.
                    }
                  ], # Optional. An array of relationship attributes.
                }
              ], # Optional. An array of entity definitions.
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  defaultValue: string, # Optional. The default value.
                  elementDefs: [
                    {
                      description: string, # Optional. The description of the enum element definition.
                      ordinal: number, # Optional. The ordinal of the enum element definition.
                      value: string, # Optional. The value of the enum element definition.
                    }
                  ], # Optional. An array of enum element definitions.
                }
              ], # Optional. An array of enum definitions.
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                    description: string, # Optional. The description of the relationship end definition.
                    isContainer: boolean, # Optional. Determines if it is container.
                    isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                    name: string, # Optional. The name of the relationship end definition.
                    type: string, # Optional. The type of the relationship end.
                  }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
                  relationshipLabel: string, # Optional. The label of the relationship.
                }
              ], # Optional. An array of relationship definitions.
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                }
              ], # Optional. An array of struct definitions.
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. An array of term template definitions.
            }
            </code>
            
            Response Body:
            
            Schema for <c>AtlasTypesDef</c>:
            <code>{
              businessMetadataDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                          type: string, # Optional. The type of the constraint.
                        }
                      ], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                    }
                  ], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: {
                    availableLocales: [string], # Optional. An array of available locales.
                    calendar: number, # Optional.
                    dateInstance: DateFormat, # Optional. The date format.
                    dateTimeInstance: DateFormat, # Optional. The date format.
                    instance: DateFormat, # Optional. The date format.
                    lenient: boolean, # Optional. Determines the leniency of the date format.
                    numberFormat: {
                      availableLocales: [string], # Optional. The number format.
                      currency: string, # Optional. The currency.
                      currencyInstance: NumberFormat, # Optional. The number format.
                      groupingUsed: boolean, # Optional. Determines if grouping is used.
                      instance: NumberFormat, # Optional. The number format.
                      integerInstance: NumberFormat, # Optional. The number format.
                      maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                      maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                      minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                      minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                      numberInstance: NumberFormat, # Optional. The number format.
                      parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                      percentInstance: NumberFormat, # Optional. The number format.
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                    }, # Optional. The number format.
                    timeInstance: DateFormat, # Optional. The date format.
                    timeZone: {
                      dstSavings: number, # Optional. The value of the daylight saving time.
                      id: string, # Optional. The ID of the timezone.
                      availableIds: [string], # Optional. An array of available IDs.
                      default: TimeZone, # Optional. The timezone information.
                      displayName: string, # Optional. The display name of the timezone.
                      rawOffset: number, # Optional. The raw offset of the timezone.
                    }, # Optional. The timezone information.
                  }, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. businessMetadataDefs
              classificationDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                }
              ], # Optional. An array of classification definitions.
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                      isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                      relationshipTypeName: string, # Optional. The name of the relationship type.
                    }
                  ], # Optional. An array of relationship attributes.
                }
              ], # Optional. An array of entity definitions.
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  defaultValue: string, # Optional. The default value.
                  elementDefs: [
                    {
                      description: string, # Optional. The description of the enum element definition.
                      ordinal: number, # Optional. The ordinal of the enum element definition.
                      value: string, # Optional. The value of the enum element definition.
                    }
                  ], # Optional. An array of enum element definitions.
                }
              ], # Optional. An array of enum definitions.
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                    description: string, # Optional. The description of the relationship end definition.
                    isContainer: boolean, # Optional. Determines if it is container.
                    isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                    name: string, # Optional. The name of the relationship end definition.
                    type: string, # Optional. The type of the relationship end.
                  }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
                  relationshipLabel: string, # Optional. The label of the relationship.
                }
              ], # Optional. An array of relationship definitions.
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                }
              ], # Optional. An array of struct definitions.
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. An array of term template definitions.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAtlasTypeDefinitionsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateAtlasTypeDefinitionsAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateAtlasTypeDefinitionsAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.UpdateAtlasTypeDefinitionsAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAtlasTypeDefinitionsAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateAtlasTypeDefinitionsAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateAtlasTypeDefinitionsAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.UpdateAtlasTypeDefinitionsAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Update all types in bulk, changes detected in the type definitions would be persisted. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>AtlasTypesDef</c>:
            <code>{
              businessMetadataDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                          type: string, # Optional. The type of the constraint.
                        }
                      ], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                    }
                  ], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: {
                    availableLocales: [string], # Optional. An array of available locales.
                    calendar: number, # Optional.
                    dateInstance: DateFormat, # Optional. The date format.
                    dateTimeInstance: DateFormat, # Optional. The date format.
                    instance: DateFormat, # Optional. The date format.
                    lenient: boolean, # Optional. Determines the leniency of the date format.
                    numberFormat: {
                      availableLocales: [string], # Optional. The number format.
                      currency: string, # Optional. The currency.
                      currencyInstance: NumberFormat, # Optional. The number format.
                      groupingUsed: boolean, # Optional. Determines if grouping is used.
                      instance: NumberFormat, # Optional. The number format.
                      integerInstance: NumberFormat, # Optional. The number format.
                      maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                      maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                      minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                      minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                      numberInstance: NumberFormat, # Optional. The number format.
                      parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                      percentInstance: NumberFormat, # Optional. The number format.
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                    }, # Optional. The number format.
                    timeInstance: DateFormat, # Optional. The date format.
                    timeZone: {
                      dstSavings: number, # Optional. The value of the daylight saving time.
                      id: string, # Optional. The ID of the timezone.
                      availableIds: [string], # Optional. An array of available IDs.
                      default: TimeZone, # Optional. The timezone information.
                      displayName: string, # Optional. The display name of the timezone.
                      rawOffset: number, # Optional. The raw offset of the timezone.
                    }, # Optional. The timezone information.
                  }, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. businessMetadataDefs
              classificationDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                }
              ], # Optional. An array of classification definitions.
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                      isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                      relationshipTypeName: string, # Optional. The name of the relationship type.
                    }
                  ], # Optional. An array of relationship attributes.
                }
              ], # Optional. An array of entity definitions.
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  defaultValue: string, # Optional. The default value.
                  elementDefs: [
                    {
                      description: string, # Optional. The description of the enum element definition.
                      ordinal: number, # Optional. The ordinal of the enum element definition.
                      value: string, # Optional. The value of the enum element definition.
                    }
                  ], # Optional. An array of enum element definitions.
                }
              ], # Optional. An array of enum definitions.
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                    description: string, # Optional. The description of the relationship end definition.
                    isContainer: boolean, # Optional. Determines if it is container.
                    isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                    name: string, # Optional. The name of the relationship end definition.
                    type: string, # Optional. The type of the relationship end.
                  }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
                  relationshipLabel: string, # Optional. The label of the relationship.
                }
              ], # Optional. An array of relationship definitions.
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                }
              ], # Optional. An array of struct definitions.
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. An array of term template definitions.
            }
            </code>
            
            Response Body:
            
            Schema for <c>AtlasTypesDef</c>:
            <code>{
              businessMetadataDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;, # Optional. The parameters of the constraint definition.
                          type: string, # Optional. The type of the constraint.
                        }
                      ], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                    }
                  ], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: {
                    availableLocales: [string], # Optional. An array of available locales.
                    calendar: number, # Optional.
                    dateInstance: DateFormat, # Optional. The date format.
                    dateTimeInstance: DateFormat, # Optional. The date format.
                    instance: DateFormat, # Optional. The date format.
                    lenient: boolean, # Optional. Determines the leniency of the date format.
                    numberFormat: {
                      availableLocales: [string], # Optional. The number format.
                      currency: string, # Optional. The currency.
                      currencyInstance: NumberFormat, # Optional. The number format.
                      groupingUsed: boolean, # Optional. Determines if grouping is used.
                      instance: NumberFormat, # Optional. The number format.
                      integerInstance: NumberFormat, # Optional. The number format.
                      maximumFractionDigits: number, # Optional. The maximum of fraction digits.
                      maximumIntegerDigits: number, # Optional. The maximum of integer digits.
                      minimumFractionDigits: number, # Optional. The minimum of fraction digits.
                      minimumIntegerDigits: number, # Optional. The minimum of integer digits.
                      numberInstance: NumberFormat, # Optional. The number format.
                      parseIntegerOnly: boolean, # Optional. Determines if only integer is parsed.
                      percentInstance: NumberFormat, # Optional. The number format.
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY", # Optional. The enum of rounding mode.
                    }, # Optional. The number format.
                    timeInstance: DateFormat, # Optional. The date format.
                    timeZone: {
                      dstSavings: number, # Optional. The value of the daylight saving time.
                      id: string, # Optional. The ID of the timezone.
                      availableIds: [string], # Optional. An array of available IDs.
                      default: TimeZone, # Optional. The timezone information.
                      displayName: string, # Optional. The display name of the timezone.
                      rawOffset: number, # Optional. The raw offset of the timezone.
                    }, # Optional. The timezone information.
                  }, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. businessMetadataDefs
              classificationDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  entityTypes: [string], # Optional. Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            &lt;ul&gt;
            &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
            &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
            &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
            &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
            &lt;/ul&gt;
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                }
              ], # Optional. An array of classification definitions.
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  subTypes: [string], # Optional. An array of sub types.
                  superTypes: [string], # Optional. An array of super types.
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                      constraints: [AtlasConstraintDef], # Optional. An array of constraints.
                      defaultValue: string, # Optional. The default value of the attribute.
                      description: string, # Optional. The description of the attribute.
                      includeInNotification: boolean, # Optional. Determines if it is included in notification.
                      isIndexable: boolean, # Optional. Determines if it is indexable.
                      isOptional: boolean, # Optional. Determines if it is optional.
                      isUnique: boolean, # Optional. Determines if it unique.
                      name: string, # Optional. The name of the attribute.
                      options: Dictionary&lt;string, string&gt;, # Optional. The options for the attribute.
                      typeName: string, # Optional. The name of the type.
                      valuesMaxCount: number, # Optional. The maximum count of the values.
                      valuesMinCount: number, # Optional. The minimum count of the values.
                      isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                      relationshipTypeName: string, # Optional. The name of the relationship type.
                    }
                  ], # Optional. An array of relationship attributes.
                }
              ], # Optional. An array of entity definitions.
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  defaultValue: string, # Optional. The default value.
                  elementDefs: [
                    {
                      description: string, # Optional. The description of the enum element definition.
                      ordinal: number, # Optional. The ordinal of the enum element definition.
                      value: string, # Optional. The value of the enum element definition.
                    }
                  ], # Optional. An array of enum element definitions.
                }
              ], # Optional. An array of enum definitions.
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET", # Optional. single-valued attribute or multi-valued attribute.
                    description: string, # Optional. The description of the relationship end definition.
                    isContainer: boolean, # Optional. Determines if it is container.
                    isLegacyAttribute: boolean, # Optional. Determines if it is a legacy attribute.
                    name: string, # Optional. The name of the relationship end definition.
                    type: string, # Optional. The type of the relationship end.
                  }, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  endDef2: AtlasRelationshipEndDef, # Optional. The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
            attribute name, cardinality and whether it  is the container end of the relationship.
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION", # Optional. The Relationship category determines the style of relationship around containment and lifecycle.
            UML terminology is used for the values.
            &lt;p&gt;
            ASSOCIATION is a relationship with no containment. &lt;br&gt;
            COMPOSITION and AGGREGATION are containment relationships.
            &lt;p&gt;
            The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
            the children cannot exist without the container. For AGGREGATION, the life cycles
            of the container and children are totally independent.
                  relationshipLabel: string, # Optional. The label of the relationship.
                }
              ], # Optional. An array of relationship definitions.
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                }
              ], # Optional. An array of struct definitions.
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef], # Optional. An array of attribute definitions.
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE", # Optional. The enum of type category.
                  createTime: number, # Optional. The created time of the record.
                  createdBy: string, # Optional. The user who created the record.
                  dateFormatter: DateFormat, # Optional. The date format.
                  description: string, # Optional. The description of the type definition.
                  guid: string, # Optional. The GUID of the type definition.
                  name: string, # Optional. The name of the type definition.
                  options: Dictionary&lt;string, string&gt;, # Optional. The options for the type definition.
                  serviceType: string, # Optional. The service type.
                  typeVersion: string, # Optional. The version of the type.
                  updateTime: number, # Optional. The update time of the record.
                  updatedBy: string, # Optional. The user who updated the record.
                  version: number, # Optional. The version of the record.
                  lastModifiedTS: string, # Optional. ETag for concurrency control.
                }
              ], # Optional. An array of term template definitions.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
