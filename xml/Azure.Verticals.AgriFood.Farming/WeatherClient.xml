<Type Name="WeatherClient" FullName="Azure.Verticals.AgriFood.Farming.WeatherClient">
  <TypeSignature Language="C#" Value="public class WeatherClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WeatherClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Verticals.AgriFood.Farming.WeatherClient" />
  <TypeSignature Language="VB.NET" Value="Public Class WeatherClient" />
  <TypeSignature Language="F#" Value="type WeatherClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The Weather service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WeatherClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of WeatherClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WeatherClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Verticals.AgriFood.Farming.WeatherClient : Uri * Azure.Core.TokenCredential -&gt; Azure.Verticals.AgriFood.Farming.WeatherClient" Usage="new Azure.Verticals.AgriFood.Farming.WeatherClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of WeatherClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WeatherClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As FarmBeatsClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Verticals.AgriFood.Farming.WeatherClient : Uri * Azure.Core.TokenCredential * Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions -&gt; Azure.Verticals.AgriFood.Farming.WeatherClient" Usage="new Azure.Verticals.AgriFood.Farming.WeatherClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of WeatherClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDataDeleteJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateDataDeleteJob (string jobId, Azure.Core.RequestContent requestBody, Azure.RequestOptions requestOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateDataDeleteJob(string jobId, class Azure.Core.RequestContent requestBody, class Azure.RequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.CreateDataDeleteJob(System.String,Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDataDeleteJob (jobId As String, requestBody As RequestContent, Optional requestOptions As RequestOptions = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateDataDeleteJob : string * Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.CreateDataDeleteJob : string * Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Response" Usage="weatherClient.CreateDataDeleteJob (jobId, requestBody, requestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="requestBody" Type="Azure.Core.RequestContent" />
        <Parameter Name="requestOptions" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="jobId"> Job ID supplied by end user. </param>
        <param name="requestBody"> The request body. </param>
        <param name="requestOptions"> The request options. </param>
        <summary> Create a weather data delete job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <list type="table"><listeader><term>Name</term><term>Type</term><term>Required</term><term>Description</term></listeader><item><term>extensionId</term><term>string</term><term>Yes</term><term> ID of the extension to be used for the providerInput. eg. DTN.ClearAg. </term></item><item><term>farmerId</term><term>string</term><term>Yes</term><term> The id of the farmer object for which weather data is being fetched. </term></item><item><term>boundaryId</term><term>string</term><term>Yes</term><term> The id of the boundary object for which weather data is being fetched. </term></item><item><term>weatherDataType</term><term>string</term><term /><term> Type of weather data. Possible values include: 'forecast' , 'historical'. </term></item><item><term>granularity</term><term>string</term><term /><term> Granularity of weather data. Possible values include: 'daily' , 'hourly'. </term></item><item><term>startDateTime</term><term>string (ISO 8601 Format)</term><term /><term> Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </term></item><item><term>endDateTime</term><term>string (ISO 8601 Format)</term><term /><term> Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </term></item><item><term>id</term><term>string</term><term /><term> Unique job id. </term></item><item><term>status</term><term>string</term><term /><term>
            Status of the job.
            
            Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
            </term></item><item><term>durationInSeconds</term><term>number</term><term /><term> Duration of the job in seconds. </term></item><item><term>message</term><term>string</term><term /><term> Status message to capture more details of the job. </term></item><item><term>createdDateTime</term><term>string (ISO 8601 Format)</term><term /><term> Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </term></item><item><term>lastActionDateTime</term><term>string (ISO 8601 Format)</term><term /><term> Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </term></item><item><term>startTime</term><term>string (ISO 8601 Format)</term><term /><term> Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </term></item><item><term>endTime</term><term>string (ISO 8601 Format)</term><term /><term> Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </term></item><item><term>name</term><term>string</term><term /><term> Name to identify resource. </term></item><item><term>description</term><term>string</term><term /><term> Textual description of the resource. </term></item><item><term>properties</term><term>Dictionary&lt;string, AnyObject&gt;</term><term /><term>
            A collection of key value pairs that belongs to the resource.
            
            Each pair must not have a key greater than 50 characters
            
            and must not have a value greater than 150 characters.
            
            Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
            </term></item></list></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDataDeleteJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; CreateDataDeleteJob (Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; CreateDataDeleteJob(valuetype Azure.WaitUntil waitUntil, string jobId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.CreateDataDeleteJob(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDataDeleteJob (waitUntil As WaitUntil, jobId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member CreateDataDeleteJob : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.CreateDataDeleteJob : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="weatherClient.CreateDataDeleteJob (waitUntil, jobId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="jobId"> Job ID supplied by end user. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Create a weather data delete job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>WeatherDataDeleteJob</c>:
            <code>{
              extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
              farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
              boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
              weatherDataType: string, # Optional. Type of weather data. Possible values include: 'forecast' , 'historical'.
              granularity: string, # Optional. Granularity of weather data. Possible values include: 'daily' , 'hourly'.
              startDateTime: string (ISO 8601 Format), # Optional. Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
              endDateTime: string (ISO 8601 Format), # Optional. Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
              id: string, # Optional. Unique job id.
              status: string, # Optional. Status of the job.
            Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
              durationInSeconds: number, # Optional. Duration of the job in seconds.
              message: string, # Optional. Status message to capture more details of the job.
              createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              name: string, # Optional. Name to identify resource.
              description: string, # Optional. Textual description of the resource.
              properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
            Each pair must not have a key greater than 50 characters
            and must not have a value greater than 150 characters.
            Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
            }
            </code>
            
            Response Body:
            
            Schema for <c>WeatherDataDeleteJob</c>:
            <code>{
              extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
              farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
              boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
              weatherDataType: string, # Optional. Type of weather data. Possible values include: 'forecast' , 'historical'.
              granularity: string, # Optional. Granularity of weather data. Possible values include: 'daily' , 'hourly'.
              startDateTime: string (ISO 8601 Format), # Optional. Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
              endDateTime: string (ISO 8601 Format), # Optional. Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
              id: string, # Optional. Unique job id.
              status: string, # Optional. Status of the job.
            Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
              durationInSeconds: number, # Optional. Duration of the job in seconds.
              message: string, # Optional. Status message to capture more details of the job.
              createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              name: string, # Optional. Name to identify resource.
              description: string, # Optional. Textual description of the resource.
              properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
            Each pair must not have a key greater than 50 characters
            and must not have a value greater than 150 characters.
            Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDataDeleteJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateDataDeleteJobAsync (string jobId, Azure.Core.RequestContent requestBody, Azure.RequestOptions requestOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateDataDeleteJobAsync(string jobId, class Azure.Core.RequestContent requestBody, class Azure.RequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.CreateDataDeleteJobAsync(System.String,Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDataDeleteJobAsync (jobId As String, requestBody As RequestContent, Optional requestOptions As RequestOptions = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateDataDeleteJobAsync : string * Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateDataDeleteJobAsync : string * Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="weatherClient.CreateDataDeleteJobAsync (jobId, requestBody, requestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="requestBody" Type="Azure.Core.RequestContent" />
        <Parameter Name="requestOptions" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="jobId"> Job ID supplied by end user. </param>
        <param name="requestBody"> The request body. </param>
        <param name="requestOptions"> The request options. </param>
        <summary> Create a weather data delete job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <list type="table"><listeader><term>Name</term><term>Type</term><term>Required</term><term>Description</term></listeader><item><term>extensionId</term><term>string</term><term>Yes</term><term> ID of the extension to be used for the providerInput. eg. DTN.ClearAg. </term></item><item><term>farmerId</term><term>string</term><term>Yes</term><term> The id of the farmer object for which weather data is being fetched. </term></item><item><term>boundaryId</term><term>string</term><term>Yes</term><term> The id of the boundary object for which weather data is being fetched. </term></item><item><term>weatherDataType</term><term>string</term><term /><term> Type of weather data. Possible values include: 'forecast' , 'historical'. </term></item><item><term>granularity</term><term>string</term><term /><term> Granularity of weather data. Possible values include: 'daily' , 'hourly'. </term></item><item><term>startDateTime</term><term>string (ISO 8601 Format)</term><term /><term> Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </term></item><item><term>endDateTime</term><term>string (ISO 8601 Format)</term><term /><term> Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </term></item><item><term>id</term><term>string</term><term /><term> Unique job id. </term></item><item><term>status</term><term>string</term><term /><term>
            Status of the job.
            
            Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
            </term></item><item><term>durationInSeconds</term><term>number</term><term /><term> Duration of the job in seconds. </term></item><item><term>message</term><term>string</term><term /><term> Status message to capture more details of the job. </term></item><item><term>createdDateTime</term><term>string (ISO 8601 Format)</term><term /><term> Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </term></item><item><term>lastActionDateTime</term><term>string (ISO 8601 Format)</term><term /><term> Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </term></item><item><term>startTime</term><term>string (ISO 8601 Format)</term><term /><term> Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </term></item><item><term>endTime</term><term>string (ISO 8601 Format)</term><term /><term> Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </term></item><item><term>name</term><term>string</term><term /><term> Name to identify resource. </term></item><item><term>description</term><term>string</term><term /><term> Textual description of the resource. </term></item><item><term>properties</term><term>Dictionary&lt;string, AnyObject&gt;</term><term /><term>
            A collection of key value pairs that belongs to the resource.
            
            Each pair must not have a key greater than 50 characters
            
            and must not have a value greater than 150 characters.
            
            Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
            </term></item></list></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDataDeleteJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; CreateDataDeleteJobAsync (Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; CreateDataDeleteJobAsync(valuetype Azure.WaitUntil waitUntil, string jobId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.CreateDataDeleteJobAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDataDeleteJobAsync (waitUntil As WaitUntil, jobId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member CreateDataDeleteJobAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.CreateDataDeleteJobAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="weatherClient.CreateDataDeleteJobAsync (waitUntil, jobId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="jobId"> Job ID supplied by end user. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Create a weather data delete job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>WeatherDataDeleteJob</c>:
            <code>{
              extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
              farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
              boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
              weatherDataType: string, # Optional. Type of weather data. Possible values include: 'forecast' , 'historical'.
              granularity: string, # Optional. Granularity of weather data. Possible values include: 'daily' , 'hourly'.
              startDateTime: string (ISO 8601 Format), # Optional. Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
              endDateTime: string (ISO 8601 Format), # Optional. Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
              id: string, # Optional. Unique job id.
              status: string, # Optional. Status of the job.
            Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
              durationInSeconds: number, # Optional. Duration of the job in seconds.
              message: string, # Optional. Status message to capture more details of the job.
              createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              name: string, # Optional. Name to identify resource.
              description: string, # Optional. Textual description of the resource.
              properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
            Each pair must not have a key greater than 50 characters
            and must not have a value greater than 150 characters.
            Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
            }
            </code>
            
            Response Body:
            
            Schema for <c>WeatherDataDeleteJob</c>:
            <code>{
              extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
              farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
              boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
              weatherDataType: string, # Optional. Type of weather data. Possible values include: 'forecast' , 'historical'.
              granularity: string, # Optional. Granularity of weather data. Possible values include: 'daily' , 'hourly'.
              startDateTime: string (ISO 8601 Format), # Optional. Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
              endDateTime: string (ISO 8601 Format), # Optional. Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
              id: string, # Optional. Unique job id.
              status: string, # Optional. Status of the job.
            Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
              durationInSeconds: number, # Optional. Duration of the job in seconds.
              message: string, # Optional. Status message to capture more details of the job.
              createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              name: string, # Optional. Name to identify resource.
              description: string, # Optional. Textual description of the resource.
              properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
            Each pair must not have a key greater than 50 characters
            and must not have a value greater than 150 characters.
            Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDataIngestionJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateDataIngestionJob (string jobId, Azure.Core.RequestContent requestBody, Azure.RequestOptions requestOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateDataIngestionJob(string jobId, class Azure.Core.RequestContent requestBody, class Azure.RequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.CreateDataIngestionJob(System.String,Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDataIngestionJob (jobId As String, requestBody As RequestContent, Optional requestOptions As RequestOptions = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateDataIngestionJob : string * Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.CreateDataIngestionJob : string * Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Response" Usage="weatherClient.CreateDataIngestionJob (jobId, requestBody, requestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="requestBody" Type="Azure.Core.RequestContent" />
        <Parameter Name="requestOptions" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="jobId"> Job id supplied by user. </param>
        <param name="requestBody"> The request body. </param>
        <param name="requestOptions"> The request options. </param>
        <summary> Create a weather data ingestion job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <list type="table"><listeader><term>Name</term><term>Type</term><term>Required</term><term>Description</term></listeader><item><term>boundaryId</term><term>string</term><term>Yes</term><term> The id of the boundary object for which weather data is being fetched. </term></item><item><term>farmerId</term><term>string</term><term>Yes</term><term> The id of the farmer object for which weather data is being fetched. </term></item><item><term>extensionId</term><term>string</term><term>Yes</term><term> ID of the extension to be used for the providerInput. eg. DTN.ClearAg. </term></item><item><term>extensionApiName</term><term>string</term><term>Yes</term><term> Extension api name to which request is to be made. </term></item><item><term>extensionApiInput</term><term>Dictionary&lt;string, AnyObject&gt;</term><term>Yes</term><term> Extension api input dictionary which would be used to feed request query/body/parameter information. </term></item><item><term>extensionDataProviderAppId</term><term>string</term><term /><term> App id of the weather data provider. </term></item><item><term>extensionDataProviderApiKey</term><term>string</term><term /><term> Api key of the weather data provider. </term></item><item><term>id</term><term>string</term><term /><term> Unique job id. </term></item><item><term>status</term><term>string</term><term /><term>
            Status of the job.
            
            Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
            </term></item><item><term>durationInSeconds</term><term>number</term><term /><term> Duration of the job in seconds. </term></item><item><term>message</term><term>string</term><term /><term> Status message to capture more details of the job. </term></item><item><term>createdDateTime</term><term>string (ISO 8601 Format)</term><term /><term> Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </term></item><item><term>lastActionDateTime</term><term>string (ISO 8601 Format)</term><term /><term> Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </term></item><item><term>startTime</term><term>string (ISO 8601 Format)</term><term /><term> Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </term></item><item><term>endTime</term><term>string (ISO 8601 Format)</term><term /><term> Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </term></item><item><term>name</term><term>string</term><term /><term> Name to identify resource. </term></item><item><term>description</term><term>string</term><term /><term> Textual description of the resource. </term></item><item><term>properties</term><term>Dictionary&lt;string, AnyObject&gt;</term><term /><term>
            A collection of key value pairs that belongs to the resource.
            
            Each pair must not have a key greater than 50 characters
            
            and must not have a value greater than 150 characters.
            
            Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
            </term></item></list></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDataIngestionJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; CreateDataIngestionJob (Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; CreateDataIngestionJob(valuetype Azure.WaitUntil waitUntil, string jobId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.CreateDataIngestionJob(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDataIngestionJob (waitUntil As WaitUntil, jobId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member CreateDataIngestionJob : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.CreateDataIngestionJob : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="weatherClient.CreateDataIngestionJob (waitUntil, jobId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="jobId"> Job id supplied by user. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Create a weather data ingestion job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>WeatherDataIngestionJob</c>:
            <code>{
              boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
              farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
              extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
              extensionApiName: string, # Required. Extension api name to which request is to be made.
              extensionApiInput: Dictionary&lt;string, AnyObject&gt;, # Required. Extension api input dictionary which would be used to feed request query/body/parameter information.
              extensionDataProviderAppId: string, # Optional. App id of the weather data provider.
              extensionDataProviderApiKey: string, # Optional. Api key of the weather data provider.
              id: string, # Optional. Unique job id.
              status: string, # Optional. Status of the job.
            Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
              durationInSeconds: number, # Optional. Duration of the job in seconds.
              message: string, # Optional. Status message to capture more details of the job.
              createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              name: string, # Optional. Name to identify resource.
              description: string, # Optional. Textual description of the resource.
              properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
            Each pair must not have a key greater than 50 characters
            and must not have a value greater than 150 characters.
            Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
            }
            </code>
            
            Response Body:
            
            Schema for <c>WeatherDataIngestionJob</c>:
            <code>{
              boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
              farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
              extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
              extensionApiName: string, # Required. Extension api name to which request is to be made.
              extensionApiInput: Dictionary&lt;string, AnyObject&gt;, # Required. Extension api input dictionary which would be used to feed request query/body/parameter information.
              extensionDataProviderAppId: string, # Optional. App id of the weather data provider.
              extensionDataProviderApiKey: string, # Optional. Api key of the weather data provider.
              id: string, # Optional. Unique job id.
              status: string, # Optional. Status of the job.
            Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
              durationInSeconds: number, # Optional. Duration of the job in seconds.
              message: string, # Optional. Status message to capture more details of the job.
              createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              name: string, # Optional. Name to identify resource.
              description: string, # Optional. Textual description of the resource.
              properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
            Each pair must not have a key greater than 50 characters
            and must not have a value greater than 150 characters.
            Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDataIngestionJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateDataIngestionJobAsync (string jobId, Azure.Core.RequestContent requestBody, Azure.RequestOptions requestOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateDataIngestionJobAsync(string jobId, class Azure.Core.RequestContent requestBody, class Azure.RequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.CreateDataIngestionJobAsync(System.String,Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDataIngestionJobAsync (jobId As String, requestBody As RequestContent, Optional requestOptions As RequestOptions = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateDataIngestionJobAsync : string * Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateDataIngestionJobAsync : string * Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="weatherClient.CreateDataIngestionJobAsync (jobId, requestBody, requestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="requestBody" Type="Azure.Core.RequestContent" />
        <Parameter Name="requestOptions" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="jobId"> Job id supplied by user. </param>
        <param name="requestBody"> The request body. </param>
        <param name="requestOptions"> The request options. </param>
        <summary> Create a weather data ingestion job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <list type="table"><listeader><term>Name</term><term>Type</term><term>Required</term><term>Description</term></listeader><item><term>boundaryId</term><term>string</term><term>Yes</term><term> The id of the boundary object for which weather data is being fetched. </term></item><item><term>farmerId</term><term>string</term><term>Yes</term><term> The id of the farmer object for which weather data is being fetched. </term></item><item><term>extensionId</term><term>string</term><term>Yes</term><term> ID of the extension to be used for the providerInput. eg. DTN.ClearAg. </term></item><item><term>extensionApiName</term><term>string</term><term>Yes</term><term> Extension api name to which request is to be made. </term></item><item><term>extensionApiInput</term><term>Dictionary&lt;string, AnyObject&gt;</term><term>Yes</term><term> Extension api input dictionary which would be used to feed request query/body/parameter information. </term></item><item><term>extensionDataProviderAppId</term><term>string</term><term /><term> App id of the weather data provider. </term></item><item><term>extensionDataProviderApiKey</term><term>string</term><term /><term> Api key of the weather data provider. </term></item><item><term>id</term><term>string</term><term /><term> Unique job id. </term></item><item><term>status</term><term>string</term><term /><term>
            Status of the job.
            
            Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
            </term></item><item><term>durationInSeconds</term><term>number</term><term /><term> Duration of the job in seconds. </term></item><item><term>message</term><term>string</term><term /><term> Status message to capture more details of the job. </term></item><item><term>createdDateTime</term><term>string (ISO 8601 Format)</term><term /><term> Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </term></item><item><term>lastActionDateTime</term><term>string (ISO 8601 Format)</term><term /><term> Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </term></item><item><term>startTime</term><term>string (ISO 8601 Format)</term><term /><term> Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </term></item><item><term>endTime</term><term>string (ISO 8601 Format)</term><term /><term> Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </term></item><item><term>name</term><term>string</term><term /><term> Name to identify resource. </term></item><item><term>description</term><term>string</term><term /><term> Textual description of the resource. </term></item><item><term>properties</term><term>Dictionary&lt;string, AnyObject&gt;</term><term /><term>
            A collection of key value pairs that belongs to the resource.
            
            Each pair must not have a key greater than 50 characters
            
            and must not have a value greater than 150 characters.
            
            Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
            </term></item></list></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDataIngestionJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; CreateDataIngestionJobAsync (Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; CreateDataIngestionJobAsync(valuetype Azure.WaitUntil waitUntil, string jobId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.CreateDataIngestionJobAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDataIngestionJobAsync (waitUntil As WaitUntil, jobId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member CreateDataIngestionJobAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.CreateDataIngestionJobAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="weatherClient.CreateDataIngestionJobAsync (waitUntil, jobId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="jobId"> Job id supplied by user. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Create a weather data ingestion job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>WeatherDataIngestionJob</c>:
            <code>{
              boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
              farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
              extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
              extensionApiName: string, # Required. Extension api name to which request is to be made.
              extensionApiInput: Dictionary&lt;string, AnyObject&gt;, # Required. Extension api input dictionary which would be used to feed request query/body/parameter information.
              extensionDataProviderAppId: string, # Optional. App id of the weather data provider.
              extensionDataProviderApiKey: string, # Optional. Api key of the weather data provider.
              id: string, # Optional. Unique job id.
              status: string, # Optional. Status of the job.
            Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
              durationInSeconds: number, # Optional. Duration of the job in seconds.
              message: string, # Optional. Status message to capture more details of the job.
              createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              name: string, # Optional. Name to identify resource.
              description: string, # Optional. Textual description of the resource.
              properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
            Each pair must not have a key greater than 50 characters
            and must not have a value greater than 150 characters.
            Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
            }
            </code>
            
            Response Body:
            
            Schema for <c>WeatherDataIngestionJob</c>:
            <code>{
              boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
              farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
              extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
              extensionApiName: string, # Required. Extension api name to which request is to be made.
              extensionApiInput: Dictionary&lt;string, AnyObject&gt;, # Required. Extension api input dictionary which would be used to feed request query/body/parameter information.
              extensionDataProviderAppId: string, # Optional. App id of the weather data provider.
              extensionDataProviderApiKey: string, # Optional. Api key of the weather data provider.
              id: string, # Optional. Unique job id.
              status: string, # Optional. Status of the job.
            Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
              durationInSeconds: number, # Optional. Duration of the job in seconds.
              message: string, # Optional. Status message to capture more details of the job.
              createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              name: string, # Optional. Name to identify resource.
              description: string, # Optional. Textual description of the resource.
              properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
            Each pair must not have a key greater than 50 characters
            and must not have a value greater than 150 characters.
            Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataDeleteJobDetails">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetDataDeleteJobDetails (string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetDataDeleteJobDetails(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.GetDataDeleteJobDetails(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataDeleteJobDetails (jobId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetDataDeleteJobDetails : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetDataDeleteJobDetails : string * Azure.RequestContext -&gt; Azure.Response" Usage="weatherClient.GetDataDeleteJobDetails (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> ID of the job. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get weather data delete job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>WeatherDataDeleteJob</c>:
            <code>{
              extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
              farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
              boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
              weatherDataType: string, # Optional. Type of weather data. Possible values include: 'forecast' , 'historical'.
              granularity: string, # Optional. Granularity of weather data. Possible values include: 'daily' , 'hourly'.
              startDateTime: string (ISO 8601 Format), # Optional. Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
              endDateTime: string (ISO 8601 Format), # Optional. Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
              id: string, # Optional. Unique job id.
              status: string, # Optional. Status of the job.
            Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
              durationInSeconds: number, # Optional. Duration of the job in seconds.
              message: string, # Optional. Status message to capture more details of the job.
              createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              name: string, # Optional. Name to identify resource.
              description: string, # Optional. Textual description of the resource.
              properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
            Each pair must not have a key greater than 50 characters
            and must not have a value greater than 150 characters.
            Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataDeleteJobDetails">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetDataDeleteJobDetails (string jobId, Azure.RequestOptions requestOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetDataDeleteJobDetails(string jobId, class Azure.RequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.GetDataDeleteJobDetails(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataDeleteJobDetails (jobId As String, Optional requestOptions As RequestOptions = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetDataDeleteJobDetails : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetDataDeleteJobDetails : string * Azure.RequestOptions -&gt; Azure.Response" Usage="weatherClient.GetDataDeleteJobDetails (jobId, requestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="requestOptions" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="jobId"> ID of the job. </param>
        <param name="requestOptions"> The request options. </param>
        <summary> Get weather data delete job. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataDeleteJobDetailsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetDataDeleteJobDetailsAsync (string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetDataDeleteJobDetailsAsync(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.GetDataDeleteJobDetailsAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataDeleteJobDetailsAsync (jobId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetDataDeleteJobDetailsAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetDataDeleteJobDetailsAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="weatherClient.GetDataDeleteJobDetailsAsync (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> ID of the job. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get weather data delete job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>WeatherDataDeleteJob</c>:
            <code>{
              extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
              farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
              boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
              weatherDataType: string, # Optional. Type of weather data. Possible values include: 'forecast' , 'historical'.
              granularity: string, # Optional. Granularity of weather data. Possible values include: 'daily' , 'hourly'.
              startDateTime: string (ISO 8601 Format), # Optional. Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
              endDateTime: string (ISO 8601 Format), # Optional. Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
              id: string, # Optional. Unique job id.
              status: string, # Optional. Status of the job.
            Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
              durationInSeconds: number, # Optional. Duration of the job in seconds.
              message: string, # Optional. Status message to capture more details of the job.
              createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              name: string, # Optional. Name to identify resource.
              description: string, # Optional. Textual description of the resource.
              properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
            Each pair must not have a key greater than 50 characters
            and must not have a value greater than 150 characters.
            Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataDeleteJobDetailsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetDataDeleteJobDetailsAsync (string jobId, Azure.RequestOptions requestOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetDataDeleteJobDetailsAsync(string jobId, class Azure.RequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.GetDataDeleteJobDetailsAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataDeleteJobDetailsAsync (jobId As String, Optional requestOptions As RequestOptions = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetDataDeleteJobDetailsAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetDataDeleteJobDetailsAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="weatherClient.GetDataDeleteJobDetailsAsync (jobId, requestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="requestOptions" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="jobId"> ID of the job. </param>
        <param name="requestOptions"> The request options. </param>
        <summary> Get weather data delete job. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataIngestionJobDetails">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetDataIngestionJobDetails (string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetDataIngestionJobDetails(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.GetDataIngestionJobDetails(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataIngestionJobDetails (jobId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetDataIngestionJobDetails : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetDataIngestionJobDetails : string * Azure.RequestContext -&gt; Azure.Response" Usage="weatherClient.GetDataIngestionJobDetails (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> ID of the job. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get weather ingestion job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>WeatherDataIngestionJob</c>:
            <code>{
              boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
              farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
              extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
              extensionApiName: string, # Required. Extension api name to which request is to be made.
              extensionApiInput: Dictionary&lt;string, AnyObject&gt;, # Required. Extension api input dictionary which would be used to feed request query/body/parameter information.
              extensionDataProviderAppId: string, # Optional. App id of the weather data provider.
              extensionDataProviderApiKey: string, # Optional. Api key of the weather data provider.
              id: string, # Optional. Unique job id.
              status: string, # Optional. Status of the job.
            Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
              durationInSeconds: number, # Optional. Duration of the job in seconds.
              message: string, # Optional. Status message to capture more details of the job.
              createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              name: string, # Optional. Name to identify resource.
              description: string, # Optional. Textual description of the resource.
              properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
            Each pair must not have a key greater than 50 characters
            and must not have a value greater than 150 characters.
            Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataIngestionJobDetails">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetDataIngestionJobDetails (string jobId, Azure.RequestOptions requestOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetDataIngestionJobDetails(string jobId, class Azure.RequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.GetDataIngestionJobDetails(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataIngestionJobDetails (jobId As String, Optional requestOptions As RequestOptions = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetDataIngestionJobDetails : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetDataIngestionJobDetails : string * Azure.RequestOptions -&gt; Azure.Response" Usage="weatherClient.GetDataIngestionJobDetails (jobId, requestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="requestOptions" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="jobId"> ID of the job. </param>
        <param name="requestOptions"> The request options. </param>
        <summary> Get weather ingestion job. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataIngestionJobDetailsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetDataIngestionJobDetailsAsync (string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetDataIngestionJobDetailsAsync(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.GetDataIngestionJobDetailsAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataIngestionJobDetailsAsync (jobId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetDataIngestionJobDetailsAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetDataIngestionJobDetailsAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="weatherClient.GetDataIngestionJobDetailsAsync (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> ID of the job. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get weather ingestion job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>WeatherDataIngestionJob</c>:
            <code>{
              boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
              farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
              extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
              extensionApiName: string, # Required. Extension api name to which request is to be made.
              extensionApiInput: Dictionary&lt;string, AnyObject&gt;, # Required. Extension api input dictionary which would be used to feed request query/body/parameter information.
              extensionDataProviderAppId: string, # Optional. App id of the weather data provider.
              extensionDataProviderApiKey: string, # Optional. Api key of the weather data provider.
              id: string, # Optional. Unique job id.
              status: string, # Optional. Status of the job.
            Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
              durationInSeconds: number, # Optional. Duration of the job in seconds.
              message: string, # Optional. Status message to capture more details of the job.
              createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
              name: string, # Optional. Name to identify resource.
              description: string, # Optional. Textual description of the resource.
              properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
            Each pair must not have a key greater than 50 characters
            and must not have a value greater than 150 characters.
            Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataIngestionJobDetailsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetDataIngestionJobDetailsAsync (string jobId, Azure.RequestOptions requestOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetDataIngestionJobDetailsAsync(string jobId, class Azure.RequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.GetDataIngestionJobDetailsAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataIngestionJobDetailsAsync (jobId As String, Optional requestOptions As RequestOptions = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetDataIngestionJobDetailsAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetDataIngestionJobDetailsAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="weatherClient.GetDataIngestionJobDetailsAsync (jobId, requestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="requestOptions" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="jobId"> ID of the job. </param>
        <param name="requestOptions"> The request options. </param>
        <summary> Get weather ingestion job. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWeathers">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetWeathers (string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, DateTimeOffset? startDateTime = default, DateTimeOffset? endDateTime = default, int? maxPageSize = default, string skipToken = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetWeathers(string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; startDateTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endDateTime, valuetype System.Nullable`1&lt;int32&gt; maxPageSize, string skipToken, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.GetWeathers(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWeathers (farmerId As String, boundaryId As String, extensionId As String, weatherDataType As String, granularity As String, Optional startDateTime As Nullable(Of DateTimeOffset) = Nothing, Optional endDateTime As Nullable(Of DateTimeOffset) = Nothing, Optional maxPageSize As Nullable(Of Integer) = Nothing, Optional skipToken As String = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetWeathers : string * string * string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetWeathers : string * string * string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="weatherClient.GetWeathers (farmerId, boundaryId, extensionId, weatherDataType, granularity, startDateTime, endDateTime, maxPageSize, skipToken, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="farmerId" Type="System.String" />
        <Parameter Name="boundaryId" Type="System.String" />
        <Parameter Name="extensionId" Type="System.String" />
        <Parameter Name="weatherDataType" Type="System.String" />
        <Parameter Name="granularity" Type="System.String" />
        <Parameter Name="startDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxPageSize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="farmerId"> Farmer ID. </param>
        <param name="boundaryId"> Boundary ID. </param>
        <param name="extensionId"> ID of the weather extension. </param>
        <param name="weatherDataType"> Type of weather data (forecast/historical). </param>
        <param name="granularity"> Granularity of weather data (daily/hourly). </param>
        <param name="startDateTime"> Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        <param name="endDateTime"> Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        <param name="maxPageSize">
            Maximum number of items needed (inclusive).
            Minimum = 10, Maximum = 1000, Default value = 50.
            </param>
        <param name="skipToken"> Skip token for getting next set of results. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Returns a paginated list of weather data. </summary>
        <returns>To be added.</returns>
        <remarks>
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>WeatherDataListResponseValue</c>:
            <code>{
              farmerId: string, # Required. Farmer ID.
              boundaryId: string, # Required. Boundary ID.
              extensionId: string, # Required. ID of the weather extension.
              location: {
                latitude: number, # Required. Latitude of the location.
                longitude: number, # Required. Longitude of the location.
              }, # Required. Location model class.
              dateTime: string (ISO 8601 Format), # Required. Date-time of the weather data, sample format: yyyy-MM-ddTHH:mm:ssZ.
              unitSystemCode: string, # Optional. Unit System like US/SI etc.
              extensionVersion: string, # Required. Version of the weather data extension.
              weatherDataType: string, # Required. Type of weather data (forecast/historical).
              granularity: string, # Required. Granularity of weather data (daily/hourly).
              cloudCover: {
                unit: string, # Optional. Data unit.
                value: number, # Optional. Data value.
              }, # Optional. Schema for storing measurement reading and unit.
              dewPoint: Measure, # Optional. Schema for storing measurement reading and unit.
              growingDegreeDay: Measure, # Optional. Schema for storing measurement reading and unit.
              precipitation: Measure, # Optional. Schema for storing measurement reading and unit.
              pressure: Measure, # Optional. Schema for storing measurement reading and unit.
              relativeHumidity: Measure, # Optional. Schema for storing measurement reading and unit.
              soilMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
              soilTemperature: Measure, # Optional. Schema for storing measurement reading and unit.
              temperature: Measure, # Optional. Schema for storing measurement reading and unit.
              visibility: Measure, # Optional. Schema for storing measurement reading and unit.
              wetBulbTemperature: Measure, # Optional. Schema for storing measurement reading and unit.
              windChill: Measure, # Optional. Schema for storing measurement reading and unit.
              windDirection: Measure, # Optional. Schema for storing measurement reading and unit.
              windGust: Measure, # Optional. Schema for storing measurement reading and unit.
              windSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
              id: string, # Optional. Weather data ID.
              eTag: string, # Optional. The ETag value to implement optimistic concurrency.
              createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
              modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
              properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
            Each pair must not have a key greater than 50 characters
            and must not have a value greater than 150 characters.
            Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="farmerId" />, <paramref name="boundaryId" />, <paramref name="extensionId" />, <paramref name="weatherDataType" /> or <paramref name="granularity" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetWeathersAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetWeathersAsync (string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, DateTimeOffset? startDateTime = default, DateTimeOffset? endDateTime = default, int? maxPageSize = default, string skipToken = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetWeathersAsync(string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; startDateTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endDateTime, valuetype System.Nullable`1&lt;int32&gt; maxPageSize, string skipToken, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.GetWeathersAsync(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWeathersAsync (farmerId As String, boundaryId As String, extensionId As String, weatherDataType As String, granularity As String, Optional startDateTime As Nullable(Of DateTimeOffset) = Nothing, Optional endDateTime As Nullable(Of DateTimeOffset) = Nothing, Optional maxPageSize As Nullable(Of Integer) = Nothing, Optional skipToken As String = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetWeathersAsync : string * string * string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetWeathersAsync : string * string * string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="weatherClient.GetWeathersAsync (farmerId, boundaryId, extensionId, weatherDataType, granularity, startDateTime, endDateTime, maxPageSize, skipToken, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="farmerId" Type="System.String" />
        <Parameter Name="boundaryId" Type="System.String" />
        <Parameter Name="extensionId" Type="System.String" />
        <Parameter Name="weatherDataType" Type="System.String" />
        <Parameter Name="granularity" Type="System.String" />
        <Parameter Name="startDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxPageSize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="farmerId"> Farmer ID. </param>
        <param name="boundaryId"> Boundary ID. </param>
        <param name="extensionId"> ID of the weather extension. </param>
        <param name="weatherDataType"> Type of weather data (forecast/historical). </param>
        <param name="granularity"> Granularity of weather data (daily/hourly). </param>
        <param name="startDateTime"> Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        <param name="endDateTime"> Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        <param name="maxPageSize">
            Maximum number of items needed (inclusive).
            Minimum = 10, Maximum = 1000, Default value = 50.
            </param>
        <param name="skipToken"> Skip token for getting next set of results. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Returns a paginated list of weather data. </summary>
        <returns>To be added.</returns>
        <remarks>
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>WeatherDataListResponseValue</c>:
            <code>{
              farmerId: string, # Required. Farmer ID.
              boundaryId: string, # Required. Boundary ID.
              extensionId: string, # Required. ID of the weather extension.
              location: {
                latitude: number, # Required. Latitude of the location.
                longitude: number, # Required. Longitude of the location.
              }, # Required. Location model class.
              dateTime: string (ISO 8601 Format), # Required. Date-time of the weather data, sample format: yyyy-MM-ddTHH:mm:ssZ.
              unitSystemCode: string, # Optional. Unit System like US/SI etc.
              extensionVersion: string, # Required. Version of the weather data extension.
              weatherDataType: string, # Required. Type of weather data (forecast/historical).
              granularity: string, # Required. Granularity of weather data (daily/hourly).
              cloudCover: {
                unit: string, # Optional. Data unit.
                value: number, # Optional. Data value.
              }, # Optional. Schema for storing measurement reading and unit.
              dewPoint: Measure, # Optional. Schema for storing measurement reading and unit.
              growingDegreeDay: Measure, # Optional. Schema for storing measurement reading and unit.
              precipitation: Measure, # Optional. Schema for storing measurement reading and unit.
              pressure: Measure, # Optional. Schema for storing measurement reading and unit.
              relativeHumidity: Measure, # Optional. Schema for storing measurement reading and unit.
              soilMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
              soilTemperature: Measure, # Optional. Schema for storing measurement reading and unit.
              temperature: Measure, # Optional. Schema for storing measurement reading and unit.
              visibility: Measure, # Optional. Schema for storing measurement reading and unit.
              wetBulbTemperature: Measure, # Optional. Schema for storing measurement reading and unit.
              windChill: Measure, # Optional. Schema for storing measurement reading and unit.
              windDirection: Measure, # Optional. Schema for storing measurement reading and unit.
              windGust: Measure, # Optional. Schema for storing measurement reading and unit.
              windSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
              id: string, # Optional. Weather data ID.
              eTag: string, # Optional. The ETag value to implement optimistic concurrency.
              createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
              modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
              properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
            Each pair must not have a key greater than 50 characters
            and must not have a value greater than 150 characters.
            Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="farmerId" />, <paramref name="boundaryId" />, <paramref name="extensionId" />, <paramref name="weatherDataType" /> or <paramref name="granularity" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="List">
      <MemberSignature Language="C#" Value="public virtual Azure.Response List (string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, DateTimeOffset? startDateTime = default, DateTimeOffset? endDateTime = default, int? maxPageSize = default, string skipToken = default, Azure.RequestOptions requestOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response List(string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; startDateTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endDateTime, valuetype System.Nullable`1&lt;int32&gt; maxPageSize, string skipToken, class Azure.RequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.List(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function List (farmerId As String, boundaryId As String, extensionId As String, weatherDataType As String, granularity As String, Optional startDateTime As Nullable(Of DateTimeOffset) = Nothing, Optional endDateTime As Nullable(Of DateTimeOffset) = Nothing, Optional maxPageSize As Nullable(Of Integer) = Nothing, Optional skipToken As String = Nothing, Optional requestOptions As RequestOptions = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member List : string * string * string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.List : string * string * string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestOptions -&gt; Azure.Response" Usage="weatherClient.List (farmerId, boundaryId, extensionId, weatherDataType, granularity, startDateTime, endDateTime, maxPageSize, skipToken, requestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="farmerId" Type="System.String" />
        <Parameter Name="boundaryId" Type="System.String" />
        <Parameter Name="extensionId" Type="System.String" />
        <Parameter Name="weatherDataType" Type="System.String" />
        <Parameter Name="granularity" Type="System.String" />
        <Parameter Name="startDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxPageSize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="farmerId"> Farmer ID. </param>
        <param name="boundaryId"> Boundary ID. </param>
        <param name="extensionId"> ID of the weather extension. </param>
        <param name="weatherDataType"> Type of weather data (forecast/historical). </param>
        <param name="granularity"> Granularity of weather data (daily/hourly). </param>
        <param name="startDateTime"> Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        <param name="endDateTime"> Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        <param name="maxPageSize">
            Maximum number of items needed (inclusive).
            
            Minimum = 10, Maximum = 1000, Default value = 50.
            </param>
        <param name="skipToken"> Skip token for getting next set of results. </param>
        <param name="requestOptions"> The request options. </param>
        <summary> Returns a paginated list of weather data. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ListAsync (string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, DateTimeOffset? startDateTime = default, DateTimeOffset? endDateTime = default, int? maxPageSize = default, string skipToken = default, Azure.RequestOptions requestOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ListAsync(string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; startDateTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endDateTime, valuetype System.Nullable`1&lt;int32&gt; maxPageSize, string skipToken, class Azure.RequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.ListAsync(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ListAsync (farmerId As String, boundaryId As String, extensionId As String, weatherDataType As String, granularity As String, Optional startDateTime As Nullable(Of DateTimeOffset) = Nothing, Optional endDateTime As Nullable(Of DateTimeOffset) = Nothing, Optional maxPageSize As Nullable(Of Integer) = Nothing, Optional skipToken As String = Nothing, Optional requestOptions As RequestOptions = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ListAsync : string * string * string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ListAsync : string * string * string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="weatherClient.ListAsync (farmerId, boundaryId, extensionId, weatherDataType, granularity, startDateTime, endDateTime, maxPageSize, skipToken, requestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="farmerId" Type="System.String" />
        <Parameter Name="boundaryId" Type="System.String" />
        <Parameter Name="extensionId" Type="System.String" />
        <Parameter Name="weatherDataType" Type="System.String" />
        <Parameter Name="granularity" Type="System.String" />
        <Parameter Name="startDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxPageSize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="farmerId"> Farmer ID. </param>
        <param name="boundaryId"> Boundary ID. </param>
        <param name="extensionId"> ID of the weather extension. </param>
        <param name="weatherDataType"> Type of weather data (forecast/historical). </param>
        <param name="granularity"> Granularity of weather data (daily/hourly). </param>
        <param name="startDateTime"> Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        <param name="endDateTime"> Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        <param name="maxPageSize">
            Maximum number of items needed (inclusive).
            
            Minimum = 10, Maximum = 1000, Default value = 50.
            </param>
        <param name="skipToken"> Skip token for getting next set of results. </param>
        <param name="requestOptions"> The request options. </param>
        <summary> Returns a paginated list of weather data. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Verticals.AgriFood.Farming.WeatherClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Verticals.AgriFood.Farming.WeatherClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
